[{"path":"https://primarycensoreddist.epinowcast.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 primarycensoreddist authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/analytic-solutions.html","id":"analytic-solutions-for-exponentially-tilted-primary-event-times","dir":"Articles","previous_headings":"","what":"Analytic solutions for exponentially tilted primary event times","title":"Analytic solutions for censored delay distributions","text":"epidemiological analysis, common primary events arriving exponentially increasing decreasing rates, example, incidence new infections growing epidemic. case, distribution primary event time within censoring window biased exponential growth decay. assume reference uniform distribution within primary censoring window \\([k, k + w_P)\\) distribution primary event time within censoring window exponential tilted uniform distribution: \\[ f_P(t) \\propto \\exp(r t) \\mathbb{1}_{[k, k + w_P]}(t). \\] case, distribution function \\(C_P\\), length time left primary censor window primary event time, given : \\[ F_{C_P}(p; r) = {  1 - \\exp(-r p) \\1 - \\exp(-r w_P)}, \\qquad p \\[0, w_P]. \\tag{1.1} \\] Note taking limit \\(\\lim_r \\rightarrow 0\\) equation (1.1) gives uniform distribution function \\(F_{C_P}(p, 0) = p / w_P\\). following convenient use (linear) difference operator defined : \\[ \\Delta_{w}f(t) = f(t + w) - f(t). \\]","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/analytic-solutions.html","id":"uniform-primary-event-time-r0","dir":"Articles","previous_headings":"","what":"Uniform primary event time (\\(r=0\\))","title":"Analytic solutions for censored delay distributions","text":"Applying uniform primary event time distribution equation 3.1 “works” gives: \\[ Q_{S_+}(t) = Q_T(t + w_P) + { 1 \\w_P} \\int_0^{w_P} f_T(t+p) p~ dp. \\] analytically solvable whenever upper distribution function \\(T\\) known mean \\(T\\) analytically solvable integral definition. case considered easier change integration variable: \\[ \\begin{aligned} Q_{S_+}(t) &= Q_T(t + w_P) + { 1 \\w_P} \\int_t^{t+w_P} f_T(z) (z-t)~ dz \\\\ &= Q_T(t + w_P) + { 1 \\w_P} \\Big[  \\int_t^{t+w_P} f_T(z) z~ dz - t \\Delta_{w_P}F_T(t) \\Big]. \\end{aligned} \\tag{2.1} \\] General partial expectation Note distribution analytically available distribution function \\(F_T\\) equation (2.1) can solved long partial expectation \\[ \\int_t^{t+w_P} f_T(z) z~ dz \\tag{2.2} \\] can reduced analytic expression. insight possible distribution average distribution can calculated analytically, includes commonly used non-negative distributions Gamma, Log-Normal Weibull distributions. General Discrete censored delay distribution First, note equation 3.3 “works” can written using difference operator: \\(f_n = -\\Delta_1 Q_{S_+}(n-1)\\). can insert expression equation (2.1) give discrete censored delay distribution uniformly distributed primary event times: \\[ \\begin{aligned} f_n &= \\Delta_1\\Big[(n-1) \\Delta_1F_T(n-1)\\Big] - \\Delta_1Q_T(n) - \\Delta_1\\Big[ \\int_{n-1}^n f_T(z) z ~dz \\Big] \\\\ &= (n+1)F_T(n+1)  + (n-1)F_T(n-1) - 2nF_T(n) - \\Delta_1\\Big[ \\int_{n-1}^n f_T(z) z ~dz \\Big]. \\end{aligned}  \\tag{2.3} \\] now consider specific delay distributions.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/analytic-solutions.html","id":"gamma-distributed-delay-times","dir":"Articles","previous_headings":"2 Uniform primary event time (\\(r=0\\))","what":"Gamma distributed delay times","title":"Analytic solutions for censored delay distributions","text":"Gamma distribution density function: \\[ f_T(z;k, \\theta) = {1 \\\\Gamma(k) \\theta^k} z^{k-1} \\exp(-z/\\theta). \\] \\(\\Gamma\\) Gamma function. Gamma distribution distribution function: \\[ \\begin{aligned} F_T(z;k, \\theta) &= {\\gamma(k, z/\\theta) \\\\Gamma(k)}, \\qquad z\\geq 0,\\\\ F_T(z;k, \\theta) &= 0, \\qquad z < 0. \\end{aligned} \\] \\(\\gamma\\) lower incomplete gamma function. Gamma partial expectation know full expectation Gamma distribution \\(\\mathbb{E}[T] = k\\theta\\), can calculated standard integral. integral partial expectation gives: \\[ \\begin{aligned} \\int_t^{t+w_P} f_T(z) z~ dz &= {1 \\\\Gamma(k) \\theta^k} \\int_t^{t+w_P}z z^{k-1} \\exp(-z/\\theta)~dz \\\\ &=  {\\Gamma(k+1) \\theta^{k+1} \\\\Gamma(k) \\theta^k}  {1 \\\\Gamma(k+1) \\theta^{k+1}} \\int_t^{t+w_P}z^{k} \\exp(-z/\\theta)~dz\\\\ &= k\\theta \\Delta_{w_P} F_T(t; k + 1, \\theta). \\end{aligned} \\tag{2.4} \\] Survival function \\(S_{+}\\) Gamma distribution substituting equation (2.4) equation (2.3) can solve survival function \\(S_+\\) terms analytically available functions: \\[ \\begin{aligned} Q_{S_+}(t; k, \\theta) &= Q_T(t + w_P; k, \\theta) + { 1 \\w_P} \\left( {1 \\\\Gamma(k) \\theta^k} \\int_t^{t+w_P} z^{k-1}  \\exp(-z/\\theta) (z-t)~ dz \\right), \\\\ &= Q_T(t + w_P; k, \\theta) + { 1 \\w_P} \\big[ k \\theta \\Delta_{w_P}F_T(t; k+1, \\theta) - t \\Delta_{w_P}F_T(t; k, \\theta) \\big]. \\end{aligned} \\tag{2.5} \\] Gamma discrete censored delay distribution substituting (2.5) (2.3) get discrete censored delay distribution terms analytically available functions: \\[ \\begin{aligned} f_n &= (n+1) F_T(n+1; k, \\theta) + (n-1) F_T(n-1; k, \\theta) - 2  n F_T(n; k, \\theta) - k \\theta \\Delta_1^{(2)}F_T(n-1; k+1, \\theta)\\\\ &= (n+1) F_T(n+1; k, \\theta) + (n-1) F_T(n-1; k, \\theta) - 2  n F_T(n; k, \\theta) \\\\ &+ k \\theta \\Big( 2 F_T(n; k+1, \\theta) - F_T(n-1; k+1, \\theta) - F_T(n+1; k+1,\\theta)  \\Big) \\qquad n = 0, 1, \\dots. \\end{aligned} \\] also found Cori et al[1].","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/analytic-solutions.html","id":"log-normal-distribution","dir":"Articles","previous_headings":"2 Uniform primary event time (\\(r=0\\))","what":"Log-Normal distribution","title":"Analytic solutions for censored delay distributions","text":"Log-Normal distribution density function: \\[ f_T(z;\\mu, \\sigma) = {1 \\z \\sigma \\sqrt{2\\pi}} \\exp\\left( - {(\\log(z) - \\mu)^2 \\2 \\sigma^2} \\right). \\] distribution function: \\[ F_T(z;\\mu, \\sigma) = \\Phi\\left( {\\log(z) - \\mu \\\\sigma} \\right). \\] \\(\\Phi\\) standard normal distribution function. Log-Normal partial expectation know full expectation Log-Normal distribution \\(\\mathbb{E}[T] = e^{\\mu + \\frac{1}{2} \\sigma^2}\\), can calculated integration integration substitution \\(y = (\\ln z - \\mu) / \\sigma\\). transformation Jacobian: \\[ \\frac{dz}{dy} = \\sigma e^{\\sigma y + \\mu}. \\] integral partial expectation, using integration substitution gives: \\[ \\begin{aligned} \\int_t^{t+w_P} z~ f_T(z; \\mu, \\sigma) dz &= {1 \\\\sigma \\sqrt{2\\pi}} \\int_t^{t+w_P}  \\exp\\left( - {(\\log(z) - \\mu)^2 \\2 \\sigma^2} \\right) dz \\\\ &= {1 \\\\sqrt{2\\pi}} \\int_{(\\ln t - \\mu)/\\sigma}^{(\\ln(t+w_P) - \\mu)/\\sigma} e^{\\sigma y + \\mu} e^{-y^2/2} dy\\\\ &= {e^{\\mu + \\frac{1}{2} \\sigma^2} \\\\sqrt{2 \\pi} } \\int_{(\\ln t - \\mu)/\\sigma}^{(\\ln(t+w_P) - \\mu)/\\sigma} e^{-(y- \\sigma)^2/2} dy \\\\ &= e^{\\mu + \\frac{1}{2} \\sigma^2} \\Big[\\Phi\\Big({\\ln(t+w_P) - \\mu \\\\sigma} - \\sigma\\Big) - \\Phi\\Big({\\ln(t) - \\mu \\\\sigma} - \\sigma\\Big) \\Big]\\\\ &= e^{\\mu + \\frac{1}{2} \\sigma^2} \\Delta_{w_P}F_T(t; \\mu + \\sigma^2, \\sigma). \\end{aligned} \\tag{2.6} \\] Survival function \\(S_{+}\\) Log-Normal distribution substituting equation (2.6) equation (2.3) can solve survival function \\(S_+\\) terms analytically available functions: \\[ \\begin{aligned} Q_{S+}(t ;\\mu, \\sigma) &= Q_T(t + w_P;\\mu, \\sigma) + { 1 \\w_P} \\int_t^{t+w_P} {1 \\z \\sigma \\sqrt{2\\pi}} \\exp\\left( - {(\\log(z) - \\mu)^2 \\2 \\sigma^2} \\right) (z-t)~ dz, \\\\ &= Q_T(t + w_P;\\mu, \\sigma) + { 1 \\w_P} \\Big[ e^{\\mu + \\frac{1}{2} \\sigma^2} \\Delta_{w_P}F_T(t; \\mu + \\sigma^2, \\sigma) - t\\Delta_{w_P}F_T(t; \\mu, \\sigma) \\Big] \\end{aligned} \\] Log-Normal discrete censored delay distribution substituting (2.6) (2.3) get discrete censored delay distribution terms analytically available functions: \\[ \\begin{aligned} f_n &= (n+1) F_T(n+1; \\mu, \\sigma) + (n-1) F_T(n-1; \\mu, \\sigma) - 2 n F_T(n; \\mu, \\sigma) \\\\ &- e^{\\mu + \\frac{1}{2} \\sigma^2} \\Delta_1^{(2)}F_T(n-1;\\mu + \\sigma^2, \\sigma) \\\\ &= (n+1) F_T(n+1; \\mu, \\sigma) + (n-1) F_T(n-1; \\mu, \\sigma) - 2 n F_T(n; \\mu, \\sigma) \\\\   &+ e^{\\mu + \\frac{1}{2} \\sigma^2} \\Big( 2 F_T(n; \\mu + \\sigma^2, \\sigma) - F_T(n+1; \\mu + \\sigma^2, \\sigma) - F_T(n-1; \\mu + \\sigma^2, \\sigma)  \\Big)\\qquad n = 0, 1, \\dots. \\end{aligned} \\]","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/analytic-solutions.html","id":"weibull-distribution","dir":"Articles","previous_headings":"2 Uniform primary event time (\\(r=0\\))","what":"Weibull distribution","title":"Analytic solutions for censored delay distributions","text":"Weibull distribution density function: \\[ f_T(z;\\lambda,k) = \\begin{cases} \\frac{k}{\\lambda}\\left(\\frac{z}{\\lambda}\\right)^{k-1}e^{-(z/\\lambda)^{k}}, & z\\geq0 ,\\\\ 0, & z<0, \\end{cases} \\] distribution function: \\[ F_T(z;\\lambda,k))=\\begin{cases}1 - e^{-(z/\\lambda)^k}, & z\\geq0,\\\\ 0, & z<0.\\end{cases} \\] \\(\\Phi\\) standard normal distribution function. Weibull partial expectation know full expectation Weibull distribution \\(\\mathbb{E}[T] = \\lambda \\Gamma(1 + 1/k)\\), can calculated integration using integration substitution \\(y = (z / \\lambda)^k\\), transformation Jacobian: \\[ \\frac{dz}{dy} = \\frac{\\lambda}{k}y^{1/k - 1}. \\] integral partial expectation, using integration substitution gives: \\[ \\begin{aligned} \\int_t^{t+w_P} z~ f_T(z; \\lambda,k) dz  &= \\int_t^{t+w_P} \\frac{kz}{\\lambda}\\left(\\frac{z}{\\lambda}\\right)^{k-1}e^{-(z/\\lambda)^{k}} dz \\\\ &= k\\int_t^{t+w_P} \\left(\\frac{z}{\\lambda}\\right)^{k}e^{-(z/\\lambda)^{k}} dz  \\\\ &= \\lambda k \\int_{(t / \\lambda)^k}^{((t + w_P) / \\lambda)^k} y y^{1/k - 1} e^{-y} dy  \\\\ &= \\lambda\\int_{(t / \\lambda)^k}^{((t + w_P) / \\lambda)^k} y^{1/k} e^{-y} dy\\\\ &= \\lambda \\Delta_{w_P} g(t; \\lambda,k) \\end{aligned} \\tag{2.7} \\] \\[ g(t; \\lambda, k) = \\gamma(1 + 1/k, (t/\\lambda)^k) = \\frac{1}{k}\\gamma(1/k, (t/\\lambda)^k) - \\frac{t}{\\lambda}e^{-(t/\\lambda)^k}. \\] reparametrisation lower incomplete gamma function. Survival function \\(S_{+}\\) Weibull distribution substituting equation (2.7) equation (2.3) can solve survival function \\(S_+\\) terms analytically available functions: \\[ Q_{S+}(t ;\\lambda,k) = Q_T(t + w_P; \\lambda,k) + { 1 \\w_P} \\Big[ \\lambda \\Delta_{w_P} g(t; \\lambda,k) - t\\Delta_{w_P}F_T(t; \\lambda,k)\\Big]. \\] Weibull discrete censored delay distribution substituting (2.7) (2.3) get discrete censored delay distribution terms analytically available functions: \\[ \\begin{aligned} f_n &= (n+1)F_T(n+1)  + (n-1)F_T(n-1) - 2nF_T(n) - \\Delta_1\\Big[ \\int_{n-1}^n f_T(z) z ~dz \\Big] \\\\ &= (n+1)F_T(n+1)  + (n-1)F_T(n-1) - 2nF_T(n) - \\lambda \\Delta_1^{(2)} g(n-1; \\lambda,k) \\\\ &= (n+1)F_T(n+1)  + (n-1)F_T(n-1) - 2nF_T(n) \\\\ &+ \\lambda [2 g(n; \\lambda,k) - g(n+1; \\lambda,k) - g(n-1; \\lambda,k)] \\qquad n = 0, 1, \\dots. \\end{aligned} \\] also found Cori et al[1]. # References","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-fitdistrplus.html","id":"what-are-we-going-to-do-in-this-vignette","dir":"Articles","previous_headings":"1 Introduction","what":"What are we going to do in this Vignette","title":"Fitting distributions using primarycensorseddist and fitdistrplus","text":"vignette, ’ll demonstrate use primarycensoreddist conjunction fitdistrplus fitting distributions. ’ll cover following key points: Simulating censored delay distribution data Fitting naive model using fitdistrplus Evaluating naive model’s performance Fitting improved model using primarycensoreddist functionality Comparing primarycensoreddist model’s performance naive model","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-fitdistrplus.html","id":"what-might-i-need-to-know-before-starting","dir":"Articles","previous_headings":"1 Introduction","what":"What might I need to know before starting","title":"Fitting distributions using primarycensorseddist and fitdistrplus","text":"vignette assumes familiarity fitdistrplus package. familiar might want start Introduction fitdistrplus vignette.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-fitdistrplus.html","id":"packages-used-in-this-vignette","dir":"Articles","previous_headings":"1 Introduction","what":"Packages used in this vignette","title":"Fitting distributions using primarycensorseddist and fitdistrplus","text":"Alongside primarycensoreddist package use fitdistrplus package fitting distributions. also use ggplot2 package plotting dplyr data manipulation.","code":"library(primarycensoreddist) library(fitdistrplus) library(ggplot2) library(dplyr)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-fitdistrplus.html","id":"simulating-censored-and-truncated-delay-distribution-data","dir":"Articles","previous_headings":"","what":"Simulating censored and truncated delay distribution data","title":"Fitting distributions using primarycensorseddist and fitdistrplus","text":"’ll start simulating censored truncated delay distribution data. ’ll use rprimarycensoreddist function (actually use rpcens alias brevity).","code":"set.seed(123) # For reproducibility  # Define the true distribution parameters n <- 1000 shape <- 1.77 # This gives a mean of 4 and sd of 3 for a gamma distribution rate <- 0.44  # Generate fixed pwindow, swindow, and obs_time pwindows <- rep(1, n) swindows <- rep(1, n) obs_times <- rep(8, n) # Truncation at 8  # Function to generate a single sample generate_sample <- function(pwindow, swindow, obs_time) {   rpcens(     1, rgamma,     shape = shape, rate = rate,     pwindow = pwindow, swindow = swindow, D = obs_time   ) }  # Generate samples samples <- mapply(generate_sample, pwindows, swindows, obs_times)  # Create initial data frame delay_data <- data.frame(   pwindow = pwindows,   swindow = swindows,   obs_time = obs_times,   observed_delay = samples,   observed_delay_upper = samples + swindows )  head(delay_data) ##   pwindow swindow obs_time observed_delay observed_delay_upper ## 1       1       1        8              2                    3 ## 2       1       1        8              4                    5 ## 3       1       1        8              1                    2 ## 4       1       1        8              5                    6 ## 5       1       1        8              1                    2 ## 6       1       1        8              4                    5 # Compare the samples with and without secondary censoring to the true # distribution # Calculate empirical CDF empirical_cdf <- ecdf(samples)  # Create a sequence of x values for the theoretical CDF x_seq <- seq(0, 8, length.out = 100)  # Calculate theoretical CDF theoretical_cdf <- pgamma(x_seq, shape = shape, rate = rate)  # Create a long format data frame for plotting cdf_data <- data.frame(   x = rep(x_seq, 2),   probability = c(empirical_cdf(x_seq), theoretical_cdf),   type = rep(c(\"Observed\", \"Theoretical\"), each = length(x_seq)),   stringsAsFactors = FALSE )  # Plot ggplot(cdf_data, aes(x = x, y = probability, color = type)) +   geom_step(linewidth = 1) +   scale_color_manual(     values = c(Observed = \"#4292C6\", Theoretical = \"#252525\")   ) +   geom_vline(     aes(xintercept = mean(samples), color = \"Observed\"),     linetype = \"dashed\", linewidth = 1   ) +   geom_vline(     aes(xintercept = shape / rate, color = \"Theoretical\"),     linetype = \"dashed\", linewidth = 1   ) +   labs(     title = \"Comparison of Observed vs Theoretical CDF\",     x = \"Delay\",     y = \"Cumulative Probability\",     color = \"CDF Type\"   ) +   theme_minimal() +   theme(     panel.grid.minor = element_blank(),     plot.title = element_text(hjust = 0.5),     legend.position = \"bottom\"   ) +   coord_cartesian(xlim = c(0, 8)) # Set x-axis limit to match truncation"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-fitdistrplus.html","id":"fitting-a-naive-model-using-fitdistrplus","dir":"Articles","previous_headings":"","what":"Fitting a naive model using fitdistrplus","title":"Fitting distributions using primarycensorseddist and fitdistrplus","text":"first fit naive model using fitdistcens() function. function designed handle secondary censored data handle primary censoring truncation without extension. see naive model fit poorly due primary censoring right truncation data.","code":"fit <- delay_data |>   dplyr::select(left = observed_delay, right = observed_delay_upper) |>   fitdistcens(     distr = \"gamma\",     start = list(shape = 1, rate = 1)   )  summary(fit) ## Fitting of the distribution ' gamma ' By maximum likelihood on censored data  ## Parameters ##        estimate Std. Error ## shape 3.3072925  0.1522836 ## rate  0.9198016  0.0450446 ## Loglikelihood:  -2019.371   AIC:  4042.742   BIC:  4052.558  ## Correlation matrix: ##           shape      rate ## shape 1.0000000 0.9334401 ## rate  0.9334401 1.0000000"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-fitdistrplus.html","id":"fitting-an-improved-model-using-primarycensoreddist-and-fitdistrplus","dir":"Articles","previous_headings":"","what":"Fitting an improved model using primarycensoreddist and fitdistrplus","title":"Fitting distributions using primarycensorseddist and fitdistrplus","text":"’ll now fit improved model using primarycensoreddist package. need define custom distribution functions using primarycensoreddist package required fitdistrplus. Rather using fitdistcens use fitdist functions handling censoring . see good agreement true estimated parameters. Rather using fitdist() directly primarycensoreddist provides wrapper function fitdistdoublecens() can used estimate double censored truncated data. bonus approach can specify data using fitdistcens left right formulation support mixed secondary censoring intervals. Note Currently functionality limited single pwindow, observation time data. functionality interest please open issue primarycensoreddist GitHub page.","code":"# Define custom distribution functions using primarycensoreddist # The try catch is required by fitdistrplus dpcens_gamma <- function(x, shape, rate) {   result <- tryCatch(     {       dprimarycensoreddist(         x, pgamma,         shape = shape, rate = rate,         pwindow = 1, swindow = 1, D = 8       )     },     error = function(e) {       rep(NaN, length(x))     }   )   return(result) }  ppcens_gamma <- function(q, shape, rate) {   result <- tryCatch(     {       pprimarycensoreddist(         q, pgamma,         shape = shape, rate = rate,         pwindow = 1, D = 8       )     },     error = function(e) {       rep(NaN, length(q))     }   )   return(result) }  # Fit the model using fitdistcens with custom gamma distribution pcens_fit <- samples |>   fitdist(     distr = \"pcens_gamma\",     start = list(shape = 1, rate = 1)   )  summary(pcens_fit) ## Fitting of the distribution ' pcens_gamma ' by maximum likelihood  ## Parameters :  ##        estimate Std. Error ## shape 1.7847171 0.11590733 ## rate  0.4642622 0.04744382 ## Loglikelihood:  -1970.286   AIC:  3944.572   BIC:  3954.388  ## Correlation matrix: ##         shape    rate ## shape 1.00000 0.92969 ## rate  0.92969 1.00000 fitdistdoublecens_fit <- delay_data |>   dplyr::select(left = observed_delay, right = observed_delay_upper) |>   fitdistdoublecens(     distr = \"gamma\",     start = list(shape = 1, rate = 1),     D = 8, pwindow = 1   )  summary(fitdistdoublecens_fit) ## Fitting of the distribution ' .pcens_dist ' by maximum likelihood  ## Parameters :  ##        estimate Std. Error ## shape 1.7847171 0.11590733 ## rate  0.4642622 0.04744382 ## Loglikelihood:  -1970.286   AIC:  3944.572   BIC:  3954.388  ## Correlation matrix: ##         shape    rate ## shape 1.00000 0.92969 ## rate  0.92969 1.00000"},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-stan.html","id":"what-are-we-going-to-do-in-this-vignette","dir":"Articles","previous_headings":"1 Introduction","what":"What are we going to do in this Vignette","title":"Fitting distributions using primarycensorseddist and cmdstan","text":"vignette, ’ll demonstrate use primarycensoreddist conjunction Stan Bayesian inference epidemiological delay distributions. ’ll cover following key points: Simulating censored delay distribution data Fitting naive model using cmdstan Evaluating naive model’s performance Fitting improved model using primarycensoreddist functionality Comparing primarycensoreddist model’s performance naive model","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-stan.html","id":"what-might-i-need-to-know-before-starting","dir":"Articles","previous_headings":"1 Introduction","what":"What might I need to know before starting","title":"Fitting distributions using primarycensorseddist and cmdstan","text":"vignette builds concepts introduced Getting Started primarycensoreddist vignette assumes familiarity using Stan tools covered use primarycensoreddist Stan vignette.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-stan.html","id":"packages-used-in-this-vignette","dir":"Articles","previous_headings":"1 Introduction","what":"Packages used in this vignette","title":"Fitting distributions using primarycensorseddist and cmdstan","text":"Alongside primarycensoreddist package use cmdstanr package interfacing cmdstan. also use ggplot2 package plotting dplyr data manipulation.","code":"library(primarycensoreddist) library(cmdstanr) library(ggplot2) library(dplyr)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-stan.html","id":"simulating-censored-and-truncated-delay-distribution-data","dir":"Articles","previous_headings":"","what":"Simulating censored and truncated delay distribution data","title":"Fitting distributions using primarycensorseddist and cmdstan","text":"’ll start simulating censored truncated delay distribution data. ’ll use rprimarycensoreddist function (actually use rpcens alias brevity).  ’ve aggregated data unique combinations pwindow, swindow, obs_time counted number occurrences observed_delay combination. data use fit model.","code":"set.seed(123) # For reproducibility  # Define the true distribution parameters n <- 2000 meanlog <- 1.5 sdlog <- 0.75  # Generate varying pwindow, swindow, and obs_time lengths pwindows <- sample(1:2, n, replace = TRUE) swindows <- sample(1:2, n, replace = TRUE) obs_times <- sample(8:10, n, replace = TRUE)  # Function to generate a single sample generate_sample <- function(pwindow, swindow, obs_time) {   rpcens(     1, rlnorm,     meanlog = meanlog, sdlog = sdlog,     pwindow = pwindow, swindow = swindow, D = obs_time   ) }  # Generate samples samples <- mapply(generate_sample, pwindows, swindows, obs_times)  # Create initial data frame delay_data <- data.frame(   pwindow = pwindows,   obs_time = obs_times,   observed_delay = samples,   observed_delay_upper = samples + swindows ) |>   mutate(     observed_delay_upper = pmin(obs_time, observed_delay_upper)   )  head(delay_data) ##   pwindow obs_time observed_delay observed_delay_upper ## 1       1        9              3                    4 ## 2       1        9              4                    5 ## 3       1        8              6                    7 ## 4       2       10              6                    8 ## 5       1       10              8                   10 ## 6       2        8              4                    5 # Aggregate to unique combinations and count occurrences # Aggregate to unique combinations and count occurrences delay_counts <- delay_data |>   summarise(     n = n(),     .by = c(pwindow, obs_time, observed_delay, observed_delay_upper)   )  head(delay_counts) ##   pwindow obs_time observed_delay observed_delay_upper  n ## 1       1        9              3                    4 37 ## 2       1        9              4                    5 31 ## 3       1        8              6                    7 16 ## 4       2       10              6                    8 26 ## 5       1       10              8                   10 22 ## 6       2        8              4                    5 43 # Compare the samples with and without secondary censoring to the true # distribution # Calculate empirical CDF empirical_cdf <- ecdf(samples)  # Create a sequence of x values for the theoretical CDF x_seq <- seq(min(samples), max(samples), length.out = 100)  # Calculate theoretical CDF theoretical_cdf <- plnorm(x_seq, meanlog = meanlog, sdlog = sdlog)  # Create a long format data frame for plotting cdf_data <- data.frame(   x = rep(x_seq, 2),   probability = c(empirical_cdf(x_seq), theoretical_cdf),   type = rep(c(\"Observed\", \"Theoretical\"), each = length(x_seq)),   stringsAsFactors = FALSE )  # Plot ggplot(cdf_data, aes(x = x, y = probability, color = type)) +   geom_step(linewidth = 1) +   scale_color_manual(     values = c(Observed = \"#4292C6\", Theoretical = \"#252525\")   ) +   geom_vline(     aes(xintercept = mean(samples), color = \"Observed\"),     linetype = \"dashed\", linewidth = 1   ) +   geom_vline(     aes(xintercept = exp(meanlog + sdlog^2 / 2), color = \"Theoretical\"),     linetype = \"dashed\", linewidth = 1   ) +   labs(     title = \"Comparison of Observed vs Theoretical CDF\",     x = \"Delay\",     y = \"Cumulative Probability\",     color = \"CDF Type\"   ) +   theme_minimal() +   theme(     panel.grid.minor = element_blank(),     plot.title = element_text(hjust = 0.5),     legend.position = \"bottom\"   )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-stan.html","id":"fitting-a-naive-model-using-cmdstan","dir":"Articles","previous_headings":"","what":"Fitting a naive model using cmdstan","title":"Fitting distributions using primarycensorseddist and cmdstan","text":"’ll start fitting naive model using cmdstan. ’ll use cmdstanr package interface cmdstan. define model string write file use primarycensoreddist Stan vignette. Now let’s compile model now let’s fit compiled model. see model converged diagnostics look good. However, just model posterior summary see might happy fit. mu smaller target 1.5 sigma larger target 0.75.","code":"writeLines(   \"data {     int<lower=0> N;  // number of observations     vector[N] y;     // observed delays     vector[N] n;     // number of occurrences for each delay   }   parameters {     real mu;     real<lower=0> sigma;   }   model {     // Priors     mu ~ normal(1, 1);     sigma ~ normal(0.5, 1);      // Likelihood     target += n .* lognormal_lpdf(y | mu, sigma);   }\",   con = file.path(tempdir(), \"naive_lognormal.stan\") ) naive_model <- cmdstan_model(file.path(tempdir(), \"naive_lognormal.stan\")) naive_fit <- naive_model$sample(   data = list(     # Add a small constant to avoid log(0)     y = delay_counts$observed_delay + 1e-6,     n = delay_counts$n,     N = nrow(delay_counts)   ),   chains = 4,   parallel_chains = 4,   refresh = ifelse(interactive(), 50, 0),   show_messages = interactive() ) naive_fit ## Warning: NAs introduced by coercion ##  variable       mean     median   sd  mad         q5        q95 rhat ess_bulk ##     lp__  -381721.39 -381721.00 1.04 0.00 -381723.00 -381720.00 1.00     1641 ##     mu         -0.60      -0.60 0.01 0.01      -0.62      -0.58 1.00     1331 ##     sigma       5.10       5.10 0.01 0.01       5.09       5.12 1.00     4340 ##  ess_tail ##        NA ##      1521 ##      2759"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-stan.html","id":"fitting-an-improved-model-using-primarycensoreddist","dir":"Articles","previous_headings":"","what":"Fitting an improved model using primarycensoreddist","title":"Fitting distributions using primarycensorseddist and cmdstan","text":"’ll now fit improved model using primarycensoreddist package. main improvement use primary_censored_dist_lpdf function fit model. Stan version pcens() function accounts primary secondary censoring windows well truncation. encode primary distribution lognormal distribution passing 1 dist_id parameter primary event distribution uniform passing 1 primary_dist_id parameter. See Stan documentation details primary_censored_dist_lpdf function. Now let’s compile model Now let’s fit compiled model. see model converged diagnostics look good. also see posterior means near true parameters 90% credible intervals include true parameters.","code":"writeLines(   \"   functions {     #include primary_censored_dist.stan     #include primary_censored_dist_analytical_cdf.stan     #include expgrowth.stan   }   data {     int<lower=0> N;  // number of observations     array[N] int<lower=0> y;     // observed delays     array[N] int<lower=0> y_upper;     // observed delays upper bound     array[N] int<lower=0> n;     // number of occurrences for each delay     array[N] int<lower=0> pwindow; // primary censoring window     array[N] int<lower=0> D; // maximum delay   }   transformed data {     array[0] real primary_params;   }   parameters {     real mu;     real<lower=0> sigma;   }   model {     // Priors     mu ~ normal(1, 1);     sigma ~ normal(0.5, 0.5);      // Likelihood     for (i in 1:N) {       target += n[i] * primary_censored_dist_lpmf(         y[i] | 1, {mu, sigma},         pwindow[i], y_upper[i], D[i],         1, primary_params       );     }   }\",   con = file.path(tempdir(), \"primarycensoreddist_lognormal.stan\") ) primarycensoreddist_model <- cmdstan_model(   file.path(tempdir(), \"primarycensoreddist_lognormal.stan\"),   include_paths = pcd_stan_path() ) primarycensoreddist_fit <- primarycensoreddist_model$sample(   data = list(     y = delay_counts$observed_delay,     y_upper = delay_counts$observed_delay_upper,     n = delay_counts$n,     pwindow = delay_counts$pwindow,     D = delay_counts$obs_time,     N = nrow(delay_counts)   ),   chains = 4,   parallel_chains = 4,   refresh = ifelse(interactive(), 50, 0),   show_messages = interactive() ) primarycensoreddist_fit ##  variable     mean   median   sd  mad       q5      q95 rhat ess_bulk ess_tail ##     lp__  -3422.78 -3422.46 1.06 0.73 -3425.06 -3421.80 1.00     1357     1504 ##     mu        1.55     1.54 0.05 0.04     1.47     1.62 1.00     1236     1308 ##     sigma     0.78     0.78 0.03 0.03     0.73     0.83 1.00     1280     1149"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/fitting-dists-with-stan.html","id":"using-pcd_cmdstan_model-for-a-more-efficient-approach","dir":"Articles","previous_headings":"","what":"Using pcd_cmdstan_model() for a more efficient approach","title":"Fitting distributions using primarycensorseddist and cmdstan","text":"previous approach works well, primarycensoreddist provides efficient convenient model can compile using pcd_cmdstan_model(). approach saves time model specification also leverages within chain parallelisation make best use machine’s resources. Alongside also supply convenience function pcd_as_cmdstan_data() convert data format can used fit model supply priors, bounds, settings. Let’s use function fit data: model generic params vector contains parameters delay distribution. case mu sigma last example. also primary_params vector contains parameters primary distribution. case empty using uniform distribution. see model converged diagnostics look good. also see posterior means near true parameters 90% credible intervals include true parameters manually written model. Note set parallel_chains = 2 threads_per_chain = 2 demonstrate within chain parallelisation. Usually however want use parallel_chains = <number chains> use remainder available cores within chain parallelisation setting threads_per_chain = <remaining cores / number chains> ensure make best use machine’s resources.","code":"# Compile the model with multithreading support pcd_model <- pcd_cmdstan_model(cpp_options = list(stan_threads = TRUE))  pcd_data <- pcd_as_cmdstan_data(   delay_counts,   delay = \"observed_delay\",   delay_upper = \"observed_delay_upper\",   relative_obs_time = \"obs_time\",   dist_id = 1, # Lognormal distribution   primary_dist_id = 1, # Uniform primary distribution   param_bounds = list(lower = c(-Inf, 0), upper = c(Inf, Inf)),   primary_param_bounds = list(lower = numeric(0), upper = numeric(0)),   priors = list(location = c(1, 0.5), scale = c(1, 0.5)),   primary_priors = list(location = numeric(0), scale = numeric(0)),   use_reduce_sum = TRUE # use within chain parallelisation )  pcd_fit <- pcd_model$sample(   data = pcd_data,   chains = 4,   parallel_chains = 2, # Run 2 chains in parallel   threads_per_chain = 2, # Use 2 cores per chain   refresh = ifelse(interactive(), 50, 0),   show_messages = interactive() )  pcd_fit ##   variable     mean   median   sd  mad       q5      q95 rhat ess_bulk ess_tail ##  lp__      -3422.74 -3422.44 0.99 0.73 -3424.81 -3421.80 1.00     1488     1420 ##  params[1]     1.54     1.54 0.04 0.04     1.47     1.62 1.01     1230     1393 ##  params[2]     0.78     0.78 0.03 0.03     0.73     0.83 1.01     1156     1386"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/primarycensoreddist.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with primarycensoreddist","text":"Delay distributions play crucial role various fields, including epidemiology, reliability analysis, survival analysis. distributions describe time two events interest, incubation period disease time failure component. Accurately estimating calculating distributions essential understanding underlying processes making informed decisions[1]. However, estimating distributions can challenging due various factors, including censoring truncation observed data[2]. estimation delay distributions often faces following challenges: Primary event censoring: primary event (e.g., exposure pathogen start process) often observed degree interval censoring. means exact time event known, rather, known occurred within certain time interval, commonly day. result, distribution based primary events combination underlying true distribution censoring distribution. Truncation: observation delay distributions often conditioned occurrence secondary event. leads truncation observed distribution, delays longer observation time captured data. Consequently, observed distribution combination underlying true distribution, censoring distribution, observation time. Secondary event censoring: secondary event (e.g., symptom onset end process) also frequently observed interval censoring. additional layer censoring complicates estimation delay distribution. primarycensoreddist package aims address challenges providing tools manipulate primary censored delay distributions. accounting censoring truncation present data, package enables accurate estimation use underlying true distribution. vignette, provide quick introduction main functions concepts primarycensoreddist package. cover mathematical formulation problem, demonstrate usage key functions, provide signposting learn .","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/primarycensoreddist.html","id":"packages-in-this-getting-started-vignette-","dir":"Articles","previous_headings":"","what":"Packages in this getting started vignette.","title":"Getting Started with primarycensoreddist","text":"well primarycensoreddist package vignette also uses ggplot2.","code":"# Load packages library(primarycensoreddist) library(ggplot2) # Set seed for reproducibility set.seed(123)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/primarycensoreddist.html","id":"generating-random-samples-with-rprimarycensoreddist","dir":"Articles","previous_headings":"","what":"Generating random samples with rprimarycensoreddist()","title":"Getting Started with primarycensoreddist","text":"function generates random samples primary event censored distribution. adjusts distribution accounting primary event distribution, potential truncation maximum delay (\\(D\\)), secondary event censoring. mathematical formulation generating random samples primary event censored distribution follows: Generate primary event times (\\(p\\)) specified primary event distribution (\\(f_p\\)) within primary event window (\\(pwindow\\)): \\[p \\sim f_p(x), \\quad 0 \\leq x \\leq pwindow\\] Generate delays (\\(d\\)) specified delay distribution (\\(f_d\\)) parameters \\(\\theta\\): \\[d \\sim f_d(x; \\theta)\\] Calculate total delays (\\(t\\)) adding primary event times delays: \\[t = p + d\\] Apply truncation ensure delays within specified range \\([0, D]\\): \\[t_{truncated} = \\{t \\mid 0 \\leq t < D\\}\\] Round truncated delays nearest secondary event window (\\(swindow\\)): \\[t_{valid} = \\lfloor \\frac{t_{truncated}}{swindow} \\rfloor \\times swindow\\] ’s example use rprimarycensoreddist() sample log-normal distribution without secondary interval censoring. simplicity use daily censoring window events.  Neither distribution matches true distribution due truncation D biases observed distributions towards shorter delays, well primary secondary event censoring.","code":"n <- 1e4 meanlog <- 1.5 sdlog <- 0.75 obs_time <- 10 pwindow <- 1  # Random samples without secondary censoring samples <- rprimarycensoreddist(   n, rlnorm,   meanlog = meanlog, sdlog = sdlog,   pwindow = pwindow, swindow = 0, D = obs_time ) # Random samples with secondary censoring samples_sc <- rprimarycensoreddist(   n, rlnorm,   meanlog = meanlog, sdlog = sdlog,   pwindow = pwindow, swindow = 1, D = obs_time ) # Calculate the PMF for the samples with secondary censoring samples_sc_pmf <- data.frame(   pmf =     table(samples_sc) /       sum(table(samples_sc)) ) # Compare the samples with and without secondary censoring to the true # distribution ggplot() +   geom_density(     data = data.frame(samples = samples),     aes(x = samples),     fill = \"#4292C6\",     col = \"#252525\",     alpha = 0.5   ) +   geom_col(     data = samples_sc_pmf,     aes(       x = as.numeric(as.character(pmf.samples_sc)),       y = pmf.Freq     ),     fill = \"#20b986\",     col = \"#252525\",     alpha = 0.5,     width = 0.9,     just = 0   ) +   geom_function(     fun = dlnorm,     args = list(meanlog = meanlog, sdlog = sdlog),     color = \"#252525\",     linewidth = 1   ) +   labs(     title = \"Comparison of Samples from Log-Normal Distribution\",     x = \"Samples\",     y = \"Density\",     caption = paste0(       \"Blue density: Samples without secondary censoring\\n\",       \"Green bars: Samples with secondary censoring\\n\",       \"Black line: True log-normal distribution without truncation\"     )   ) +   scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +   theme_minimal() +   theme(     panel.grid.minor = element_blank(),     plot.title = element_text(hjust = 0.5)   )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/primarycensoreddist.html","id":"compute-the-primary-event-censored-cumulative-distribution-function-cdf-for-delays-with-pprimarycensoreddist","dir":"Articles","previous_headings":"","what":"Compute the primary event censored cumulative distribution function (CDF) for delays with pprimarycensoreddist()","title":"Getting Started with primarycensoreddist","text":"function computes primary event censored cumulative distribution function (CDF) given set quantiles. adjusts CDF delay distribution accounting primary event distribution potential truncation maximum delay (\\(D\\)). primary event censored CDF, (\\(F_{\\text{cens}}(q)\\)), given : \\[ F_{\\text{cens}}(q) = \\int_{0}^{pwindow} F(q - p) \\cdot f_{\\text{primary}}(p) \\, dp \\] \\(F\\) CDF delay distribution, \\(f_{\\text{primary}}\\) PDF primary event times, \\(pwindow\\) primary event window. maximum delay \\(D\\) finite, CDF normalized dividing \\(F_{\\text{cens}}(D)\\): \\[ F_{\\text{cens,norm}}(q) = \\frac{F_{\\text{cens}}(q)}{F_{\\text{cens}}(D)} \\] \\(F_{\\text{cens,norm}}(q)\\) normalized CDF. Let’s compare empirical CDF samples without secondary censoring theoretical CDF computed using pprimarycensoreddist():  theoretical CDF matches empirical CDF well, confirming pprimarycensoreddist() working expected.","code":"empirical_cdf <- ecdf(samples) theoretical_cdf <- pprimarycensoreddist(   seq(0, obs_time, length.out = 100),   plnorm,   meanlog = meanlog, sdlog = sdlog,   pwindow = pwindow, D = obs_time )  # Create a data frame for plotting cdf_data <- data.frame(   x = seq(0, obs_time, length.out = 100),   Theoretical = theoretical_cdf,   Empirical = empirical_cdf(seq(0, obs_time, length.out = 100)) )  # Plot the empirical and theoretical CDFs ggplot(cdf_data, aes(x = x)) +   geom_step(aes(y = Theoretical), color = \"black\", linewidth = 1) +   geom_step(aes(y = Empirical), color = \"#4292C6\", linewidth = 1) +   labs(     title = \"Comparison of Empirical and Theoretical CDFs\",     x = \"Delay\",     y = \"Cumulative Probability\",     caption = paste0(       \"Blue line: Empirical CDF from samples without secondary censoring\\n\",       \"Black line: Theoretical CDF computed using pprimarycensoreddist()\"     )   ) +   scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +   theme_minimal() +   theme(     panel.grid.minor = element_blank(),     plot.title = element_text(hjust = 0.5)   )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/primarycensoreddist.html","id":"compute-the-primary-event-censored-probability-mass-function-pmf-with-dprimarycensoreddist","dir":"Articles","previous_headings":"","what":"Compute the primary event censored probability mass function (PMF) with dprimarycensoreddist()","title":"Getting Started with primarycensoreddist","text":"function computes primary event censored probability mass function (PMF) given set quantiles using CDF. top accounting primary event distribution truncation, also accounts secondary event censoring. primary event censored PMF, (\\(f_{\\text{cens}}(d)\\)), given : \\[ f_{\\text{cens}}(d) = F_{\\text{cens}}(d + \\text{swindow}) - F_{\\text{cens}}(d) \\] (\\(F_{\\text{cens}}\\)) potentially right truncated primary event censored CDF (\\(\\text{swindow}\\)) secondary event window. Let’s compare empirical PMF samples secondary censoring theoretical PMF computed using dprimarycensoreddist():  theoretical PMF matches empirical PMF well, confirming dprimarycensoreddist() also working expected.","code":"# Calculate the theoretical PMF using dprimarycensoreddist theoretical_pmf <- dprimarycensoreddist(   0:(obs_time - 1),   plnorm,   meanlog = meanlog, sdlog = sdlog,   pwindow = pwindow, swindow = 1, D = obs_time )  pmf_df <- data.frame(   x = 0:obs_time,   pmf = c(theoretical_pmf, 0) )  # Plot the empirical and theoretical PMFs ggplot() +   geom_col(     data = samples_sc_pmf,     aes(       x = as.numeric(as.character(pmf.samples_sc)),       y = pmf.Freq     ),     fill = \"#20b986\",     col = \"#252525\",     alpha = 0.5,     width = 0.9,     just = 0   ) +   geom_step(     data = pmf_df,     aes(x = x, y = pmf),     color = \"black\",     linewidth = 1   ) +   labs(     title = \"Comparison of Samples from Log-Normal Distribution\",     x = \"Samples\",     y = \"Density\",     caption = paste0(       \"Green bars: Empirical PMF from samples with secondary censoring\\n\",       \"Black line: Theoretical PMF computed using dprimarycensoreddist()\"     )   ) +   scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +   theme_minimal() +   theme(     panel.grid.minor = element_blank(),     plot.title = element_text(hjust = 0.5)   )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/primarycensoreddist.html","id":"other-key-functionality","dir":"Articles","previous_headings":"","what":"Other key functionality","title":"Getting Started with primarycensoreddist","text":"addition main functions, package also includes: Primary event distributions: package includes commonly used primary event distributions exponential growth. Stan versions functions R functions interface Stan: R functions corresponding Stan function. Stan functions used estimation delay distributions using Stan software. package also includes tools manipulate Stan code R.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/primarycensoreddist.html","id":"learning-more","dir":"Articles","previous_headings":"","what":"Learning more","title":"Getting Started with primarycensoreddist","text":"primarycensoreddist see package vignettes function documentation. methodological background delay distributions see Park et al.[2]. advice best practices estimating handling delay distributions see Charniga et al.[1].","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/using-stan-tools.html","id":"what-are-we-going-to-do-in-this-vignette","dir":"Articles","previous_headings":"1 Introduction","what":"What are we going to do in this Vignette","title":"How to use primarycensoreddist with Stan","text":"vignette, ’ll explore use primarycensoreddist package conjunction Stan. ’ll cover following key points: Introduction Stan relevance analysis Overview packages ’ll using access use Stan functions provided primarycensoreddist Methods integrating Stan functions workflow","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/using-stan-tools.html","id":"what-is-stan-and-why-are-we-using-it","dir":"Articles","previous_headings":"1 Introduction","what":"What is Stan and why are we using it","title":"How to use primarycensoreddist with Stan","text":"Stan probabilistic programming language statistical inference. provides flexible efficient platform Bayesian modeling widely used various fields data science statistics. vignette, ’ll use Stan conjunction primarycensoreddist perform Bayesian inference censored data. information Stan: Stan’s official website Stan documentation Stan forums community support discussions","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/using-stan-tools.html","id":"packages-used-in-this-vignette","dir":"Articles","previous_headings":"1 Introduction","what":"Packages used in this vignette","title":"How to use primarycensoreddist with Stan","text":"Alongside primarycensoreddist package use cmdstanr package interfacing cmdstan.","code":"library(primarycensoreddist) library(cmdstanr)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/using-stan-tools.html","id":"using-stan-code-in-primarycensoreddist","dir":"Articles","previous_headings":"","what":"Using Stan code in primarycensoreddist","title":"How to use primarycensoreddist with Stan","text":"primarycensoreddist includes set Stan functions mirror R functions primarycensoreddist. Documentation functions can found . support range approaches integrate Stan code workflow.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/using-stan-tools.html","id":"checking-available-stan-functions-using-pcd_stan_functions","dir":"Articles","previous_headings":"2 Using Stan code in primarycensoreddist","what":"Checking available Stan functions using pcd_stan_functions()","title":"How to use primarycensoreddist with Stan","text":"Aside reading documentation also possible list available Stan functions using helper function directly R.","code":"pcd_stan_functions() ##  [1] \"expgrowth_pdf\"                           ##  [2] \"expgrowth_lpdf\"                          ##  [3] \"expgrowth_cdf\"                           ##  [4] \"expgrowth_lcdf\"                          ##  [5] \"expgrowth_rng\"                           ##  [6] \"check_for_analytical\"                    ##  [7] \"primary_censored_gamma_uniform_lcdf\"     ##  [8] \"primary_censored_lognormal_uniform_lcdf\" ##  [9] \"primary_censored_dist_analytical_lcdf\"   ## [10] \"primary_censored_dist_analytical_cdf\"    ## [11] \"dist_lcdf\"                               ## [12] \"primary_dist_lpdf\"                       ## [13] \"primary_censored_ode\"                    ## [14] \"primary_censored_dist_cdf\"               ## [15] \"primary_censored_dist_lcdf\"              ## [16] \"primary_censored_dist_lpmf\"              ## [17] \"primary_censored_dist_pmf\"               ## [18] \"primary_censored_sone_lpmf_vectorized\"   ## [19] \"primary_censored_sone_pmf_vectorized\""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/using-stan-tools.html","id":"accessing-stan-functions","dir":"Articles","previous_headings":"2 Using Stan code in primarycensoreddist","what":"Accessing Stan functions","title":"How to use primarycensoreddist with Stan","text":"Stan functions accessed using pcd_load_stan_functions() function. function takes name function argument returns function string. can additionally write functions file wrap functions{} block.","code":"pcd_load_stan_functions(\"primary_censored_dist_lpmf\") ## [1] \"// Stan functions from primarycensoreddist version 0.5.0.1000\\nreal primary_censored_dist_lpmf(data int d, int dist_id, array[] real params,\\n                                data real pwindow, data real d_upper,\\n                                data real D, int primary_dist_id,\\n                                array[] real primary_params) {\\n  if (d_upper > D) {\\n    reject(\\\"Upper truncation point is greater than D. It is \\\", d_upper,\\n           \\\" and D is \\\", D, \\\". Resolve this by increasing D to be greater or equal to d + swindow or decreasing swindow.\\\");\\n  }\\n  if (d_upper <= d) {\\n    reject(\\\"Upper truncation point is less than or equal to d. It is \\\", d_upper,\\n           \\\" and d is \\\", d, \\\". Resolve this by increasing d to be less than d_upper.\\\");\\n  }\\n  real log_cdf_upper = primary_censored_dist_lcdf(\\n    d_upper | dist_id, params, pwindow, positive_infinity(), primary_dist_id, primary_params\\n  );\\n  real log_cdf_lower = primary_censored_dist_lcdf(\\n    d | dist_id, params, pwindow, positive_infinity(), primary_dist_id, primary_params\\n  );\\n  if (!is_inf(D)) {\\n    real log_cdf_D;\\n\\n    if (d_upper == D) {\\n      log_cdf_D = log_cdf_upper;\\n    } else {\\n      log_cdf_D = primary_censored_dist_lcdf(\\n        D | dist_id, params, pwindow, positive_infinity(), primary_dist_id, primary_params\\n      );\\n    }\\n    return log_diff_exp(log_cdf_upper, log_cdf_lower) - log_cdf_D;\\n  } else {\\n    return log_diff_exp(log_cdf_upper, log_cdf_lower);\\n  }\\n}\""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/using-stan-tools.html","id":"writing-functions-to-a-file","dir":"Articles","previous_headings":"2 Using Stan code in primarycensoreddist > 2.3 Linking the Stan functions to your workflow","what":"Writing functions to a file","title":"How to use primarycensoreddist with Stan","text":"One option using Stan functions write file compile using cmdstanr. good approach means functions written can used way stan functions might use. downside may mean work keeping date changes functions. can using pcd_load_stan_functions() function. can now compiled used way cmdstanr model. Alternatively, use #include expgrowth_rng.stan stan file functions block include function along path file stan file (see ).","code":"expgrowth_rng_file <- file.path(tempdir(), \"expgrowth_rng.stan\") exp_model <- pcd_load_stan_functions(   \"expgrowth_rng\",   write_to_file = TRUE,   output_file = expgrowth_rng_file,   wrap_in_block = TRUE ) ## Stan functions written to: /tmp/Rtmps5ZpKD/expgrowth_rng.stan model <- cmdstan_model(expgrowth_rng_file) model ## functions { ## // Stan functions from primarycensoreddist version 0.5.0.1000 ## real expgrowth_rng(real min, real max, real r) { ##   real u = uniform_rng(0, 1); ##   if (abs(r) < 1e-10) { ##     return min + u * (max - min); ##   } ##   return min + log(u * (exp(r * max) - exp(r * min)) + exp(r * min)) / r; ## } ## }"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/using-stan-tools.html","id":"including-the-functions-directly-via-include_paths","dir":"Articles","previous_headings":"2 Using Stan code in primarycensoreddist > 2.3 Linking the Stan functions to your workflow","what":"Including the functions directly via include_paths","title":"How to use primarycensoreddist with Stan","text":"Rather writing functions file also possible include directly stan file using include_paths argument cmdstan_model(). useful don’t clutter model stan code primarycensoreddist want automatic updating functions. demonstrate first write small model expgrowth.stan include paths (rather writing file including ). first step find file path expgrowth_rng function. done now write stan wrapper model. can now use file compile model. Note need include path primarycensoreddist Stan functions using include_paths argument cmdstan_model(). can sample model (set fixed_param = TRUE toy example doesn’t require MCMC sampling).","code":"pcd_stan_files(\"expgrowth_rng\") ## [1] \"expgrowth.stan\" expgrowth_stan_file <- file.path(tempdir(), \"expgrowth.stan\") writeLines(   text = c(     \"functions {\",     \"#include expgrowth.stan\",     \"}\",     \"generated quantities {\",     \"  real y = expgrowth_rng(0, 1, 0.4);\",     \"}\"   ),   con = expgrowth_stan_file ) model <- cmdstan_model(expgrowth_stan_file, include_paths = pcd_stan_path()) model ## functions { ## #include expgrowth.stan ## } ## generated quantities { ##   real y = expgrowth_rng(0, 1, 0.4); ## } samples <- model$sample(chains = 1, fixed_param = TRUE) ## Running MCMC with 1 chain... ##  ## Chain 1 Iteration:   1 / 1000 [  0%]  (Sampling)  ## Chain 1 Iteration: 100 / 1000 [ 10%]  (Sampling)  ## Chain 1 Iteration: 200 / 1000 [ 20%]  (Sampling)  ## Chain 1 Iteration: 300 / 1000 [ 30%]  (Sampling)  ## Chain 1 Iteration: 400 / 1000 [ 40%]  (Sampling)  ## Chain 1 Iteration: 500 / 1000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 600 / 1000 [ 60%]  (Sampling)  ## Chain 1 Iteration: 700 / 1000 [ 70%]  (Sampling)  ## Chain 1 Iteration: 800 / 1000 [ 80%]  (Sampling)  ## Chain 1 Iteration: 900 / 1000 [ 90%]  (Sampling)  ## Chain 1 Iteration: 1000 / 1000 [100%]  (Sampling)  ## Chain 1 finished in 0.0 seconds. samples ##  variable mean median   sd  mad   q5  q95 rhat ess_bulk ess_tail ##         y 0.51   0.52 0.29 0.38 0.06 0.95 1.00     1065      983"},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/using-stan-tools.html","id":"using-stan-functions-directly-in-r","dir":"Articles","previous_headings":"2 Using Stan code in primarycensoreddist","what":"Using Stan functions directly in R","title":"How to use primarycensoreddist with Stan","text":"Whilst possible use Stan functions directly R recommended use cases (use R functions primarycensoreddist instead). However, can useful understand going hood exploration (indeed use internally primarycensoreddist check functions R implementations). use expose_functions() method already compiled model. can now use function R. Note may get slightly complicated stan function depends stan functions (.e. need included compiled model well).","code":"model$expose_functions(global = TRUE) expgrowth_rng(0, 1, 0.4) ## [1] 0.6524848"},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"what-are-we-going-to-do-in-this-vignette","dir":"Articles","previous_headings":"1 Introduction","what":"What are we going to do in this Vignette","title":"Why it works","text":"vignette, ’ll explain underlying statistical model primarycensoreddist package. ’ll cover following key points: Introduction censored data problems time event analysis. Discuss relevant issues censoring epidemiological data. Introduce statistical model used primarycensoreddist. Distributions can derive censored delay distribution analytically.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"censoring-and-right-truncation-problems-in-time-to-event-analysis","dir":"Articles","previous_headings":"","what":"Censoring and right truncation problems in time to event analysis","title":"Why it works","text":"Time event analysis, also known survival analysis, concerns estimating distribution delay times events. distinctive feature field methodological techniques used deal missing data problems common data sets delay times[1]. primarycensoreddist focus two particular missing data problems: Interval censoring. primary (start) time /secondary (end) time delay unobserved known within intervals. Right truncation. Truncated delay data items reported secondary events less known time, example current data collection time. statistical epidemiology, missing data problems occur frequently data analysis theoretical modelling. detailed description problems epidemiological context see[2,3]. data analysis, events epidemiology commonly reported occurring particular day week (interval censoring). emerging outbreak, datasets can incompletely observed (right truncation) can great deal uncertainty around precise timing events (interval censoring). theoretical epidemiological modelling, often appropriate model evolution infectious disease occurring discrete time, example EpiNow2 EpiEstim modelling packages. means appropriately discretising continuous distributions, generation interval distribution. primarycensoreddist treat discretisation intrinsically continuous distributions interval censoring problem allows us simultaneously provide methods applied theoretical contexts.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"statistical-model-used-in-primarycensoreddist","dir":"Articles","previous_headings":"","what":"Statistical model used in primarycensoreddist","title":"Why it works","text":"described Getting Started primarycensoreddist, primarycensoreddist focuses subset methods time event analysis address data missingness problems commonly found epidemiological datasets. present statistical problem double interval censoring problem, primary event time secondary event times interval censored. can recover single interval censoring problems reducing one intervals point. particular, key assumption make censoring window events known independent event time. known non-informative censoring. target inference distribution delay time primary secondary events. assume delay time random variable \\(T = S - P_{u}\\) distribution function \\(F_T(t) = Pr(T < t)\\) density function \\(f_T(t)\\). treatment assume delay time shift-invariant, , distribution delay time regardless primary event time. (unconditional) primary event time random variable \\(P_{u}\\) distribution function \\(F_{P_{u}}(t)\\) density function \\(f_{P_{u}}(t)\\). secondary event time random variable \\(S\\), treatment construct secondary event time primary time delay, therefore marginal distribution \\(S\\) considered. censoring window event interval within event known occurred, respectively, \\(P \\[t_P, t_P + w_P]\\) \\(S \\[t_S, t_S + w_S]\\). lengths censoring windows \\(w_P\\) \\(w_S\\) respectively. precise event times within windows unobserved. Note since primary event time known censoring window, predominantly interested conditional primary time \\(P = P_{u} | \\{ P_{u} \\[t_P, t_P + w_P]\\}\\) density function: \\[ \\begin{aligned} f_{P}(p) &= {f_{P_{u}}(p) \\F_{P_{u}}(t_P + w_P) - F_{P_{u}}(t_P)}, \\qquad &p \\[t_P, t_P + w_P],\\\\ f_{P}(p) &= 0, \\qquad &\\text{otherwise}. \\end{aligned} \\] note, measure censored delay time \\(T_c\\) primary secondary event windows endpoint endpoint: \\(T_c = t_S + w_S - (t_P + w_P)\\). Note generative model delays “Getting started” truncated delay \\(t_{\\text{valid}}\\) measured startpoint startpoint event windows. treatment focus survival function time end primary window secondary event time denote \\(S_{+}\\). use derive distribution censored delay time \\(T_c\\). equivalent , differs mathematical approach treatments censoring problems epidemiology, [2], see section Connections approaches details.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"censored-delay-time-distribution","dir":"Articles","previous_headings":"3 Statistical model used in primarycensoreddist","what":"Censored delay time distribution","title":"Why it works","text":"section, explain derive distribution censored delay time \\(T_c\\) distribution delay time \\(T\\) condition distribution primary event time \\(P\\).","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"survival-function-of-time-from-the-end-of-the-primary-censoring-window-to-the-secondary-event-time","dir":"Articles","previous_headings":"3 Statistical model used in primarycensoreddist > 3.1 Censored delay time distribution","what":"Survival function of time from the end of the primary censoring window to the secondary event time","title":"Why it works","text":"order reason upon distribution censored delay time \\(T_c\\), useful consider time end (right) point primary censoring interval secondary time random variable, \\[ S_+ = S - (t_P + w_P) = T - ((t_P + w_P) - P) = T - C_P. \\] \\(T\\) delay distribution interest \\(C_P = (t_P + w_P) - P\\) interval end (right) point primary censoring window primary event time; note definition \\(C_P\\) observed can relate distribution distribution \\(P\\): \\(F_{C_P}(p) = Pr(C_P < p) = Pr(P > t_P + w_P - p)\\). non-informative censoring, possible derive upper distribution function \\(S_+\\), survival function \\(S_+\\), distribution \\(T\\) distribution \\(C_P\\). \\[ \\begin{equation} \\begin{split} Q_{S_+}(t) &= Pr(S_+ > t) \\\\ &= Pr(T > C_P + t) \\\\ &= \\mathbb{E}_{C_P} \\Big[Q_T(t + C_P)\\Big] \\\\ &= \\int_0^{w_P} Q_T(t + p) f_{C_P}(p) dp. \\end{split} \\end{equation} \\] Using integration parts gives: \\[ Q_{S_+}(t) = Q_T(t + w_P) + \\int_0^{w_P} f_T(t+p) F_{C_P}(p) dp. \\tag{3.1} \\] used \\(Q^{'}_{T} = - f_T\\), \\(Q_T\\) survival function actual delay distribution interest \\(w_P\\) length primary censoring window. Equation (3.1) key equation note used derive distribution censored delay time \\(T_c\\). interpretation probability secondary event time greater \\(t\\) end primary censoring window sum two disjoint event probabilities: probability actual delay time \\(T\\) greater \\(t + w_P\\). probability actual delay time \\(T\\) \\(t\\) \\(t + w_P\\), primary event time \\(P\\) occurred sufficiently close end primary censor window secondary even occurred time \\(t\\) end primary window. Note “Getting started” target numerical quadrature cumulative distribution function sum primary time within primary censor window delay time.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"probability-of-secondary-event-time-within-a-secondary-censoring-window","dir":"Articles","previous_headings":"3 Statistical model used in primarycensoreddist > 3.1 Censored delay time distribution","what":"Probability of secondary event time within a secondary censoring window","title":"Why it works","text":"constructed survival function \\(S_+\\) equation (3.1), using numerical quadrature way, can calculate probability mass secondary event time falling within observed secondary censoring window length \\(w_S\\) begins time \\(n - w_S\\) primary censoring window. probability censored delay time \\(T_c\\) \\(n\\). gives censored delay time probability integrating censored values: \\[ Pr(S_+ \\[n - w_S, n)) = Q_{S_+}(n-w_S) - Q_{S_+}(n). \\tag{3.2} \\] Note censored secondary event time can also occur within primary censoring window. happens probability, \\[ Q_{S_+}(-w_P) - Q_{S_+}(0) = 1 - Q_T(w_P) - \\int_0^{w_P} f_T(p) F_{C_P}(p) dp = Pr(T< C). \\]","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"discrete-censored-delay-distribution","dir":"Articles","previous_headings":"3 Statistical model used in primarycensoreddist > 3.1 Censored delay time distribution","what":"Discrete censored delay distribution","title":"Why it works","text":"common situation every primary secondary event window single time unit, \\(w_P = w_S = 1\\), data arrives non-overlapping intervals. example, context infectious disease modelling, might data set symptom onsets (primary event) time seeking health care (secondary event) reported days. situation, interested probability censored delays \\(T_c\\) units event window. case equation (3.2) : \\[ f_n = Pr(T_c = n) = Pr(S_+ \\[n - 1, n)) = Q_{S_+}(n-1) - Q_{S_+}(n)\\qquad n = 0, 1, \\dots. \\tag{3.3} \\] discrete probability mass function secondary event time relative primary event time units event window.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"connections-to-other-approaches","dir":"Articles","previous_headings":"","what":"Connections to other approaches","title":"Why it works","text":"section, discuss approach taken primarycensoreddist relates approaches censored data problems time event analysis.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"connection-to-park-et-al-2014","dir":"Articles","previous_headings":"4 Connections to other approaches","what":"Connection to Park et al 2014","title":"Why it works","text":"Using notation Park et al[2], write conditional probability secondary event time \\(S\\(S_L,S_R)\\) given primary event time \\(P \\(P_L,P_R)\\) : \\[ \\begin{aligned} \\mathrm{Pr}(S_L < S < S_R | P_L < P < P_R) &= \\frac{\\mathrm{Pr}(P_L < P < P_R, S_L < S < S_R)}{\\mathrm{Pr}(P_L < P < P_R)} \\\\    &= \\frac{\\int_{P_L}^{P_R} \\int_{S_L}^{S_R} g_P(x) f_x(y-x) dy dx}{\\int_{P_L}^{P_R} g_P(x) dx}\\\\    &= \\int_{P_L}^{P_R} \\int_{S_L}^{S_R} g_P(x|P_L, P_R) f_x(y-x)dy dx \\end{aligned} \\] note, assume forward distribution doesn’t vary time (\\(f_x = f\\)), \\[ \\int_{P_L}^{P_R} \\int_{S_L}^{S_R} g_P(x|P_L, P_R) f_x(y-x)dy dx = \\int_{P_L}^{P_R} g_P(x|P_L, P_R) \\big[F(S_R - x) - F(S_L - x)\\big] dx \\] , using integration parts, get: \\[ \\begin{split} \\int_{P_L}^{P_R} g_P(x|P_L, P_R) \\big[F(S_R - x) - F(S_L - x)\\big] dx &= F(S_R - P_R) - F(S_L - P_R)  \\\\ & - \\int_{P_L}^{P_R} G_P(x|P_L, P_R) \\big[f(S_L - x) - f(S_R - x)\\big] dx \\end{split} \\tag{4.1} \\] used \\(\\partial_x F(S_R - x) = - f(S_R - x)\\) \\(\\partial_x F(S_L - x) = - f(S_L - x)\\). can now compare equation (3.2) considering following transformations: \\(P_L = -w_P\\) \\(P_R = 0\\), note treating endpoint primary censoring window origin. \\(S_L = n-w_S\\) \\(S_R = n\\), interested probability secondary event time falling within secondary censoring window \\([n, n+ w_S)\\). equation (4.1) becomes: \\[ \\begin{aligned} \\mathrm{Pr}(S_L < S < S_R | P_L < P < P_R) &= F(n) - F(n-w_S) - \\int_{-w_P}^{0} G_P(x|-w_P, 0) \\big[f(n - w_S - x) - f(n - x)\\big] dx \\end{aligned} \\] Making transformation \\(x = -p\\), rewriting notation note gives: \\[ \\begin{aligned} &= F(n) - F(n-w_S) + \\int_{w_P}^{0} G_P(-p|-w_P, 0) \\big[f_T(n - w_S + p) - f_T(n +p)\\big] dp \\\\ &= F(n) - F(n-w_S) + \\int_{0}^{w_P} G_P(-p|-w_P, 0) \\big[f_T(n + p) - f_T(n - w_S +p)\\big] dp\\\\ &= F(n) - F(n-w_S) + \\int_{0}^{w_P} (1 - F_{C_P}(p)) \\big[f_T(n + p) - f_T(n - w_S +p)\\big] dp\\\\ &= F(n + w_P) - F(n-w_S + w_P) + \\int_{0}^{w_P} [f_T(n + p - w_S) - f_T(n + p)] F_{C_P}(p) dp\\\\ &= Q_T(n-w_S + w_P) - Q_T(n + w_P) + \\int_{0}^{w_P} [f_T(n + p - w_S) - f_T(n + p)] F_{C_P}(p) dp \\\\ &= Q_{S_+}(n-w_S) - Q_{S_+}(n ). \\end{aligned} \\] equation (3.2). derivation, used \\(G_P(x|-w_P, 0)\\) distribution function time start primary interval primary event time, \\(F_{C_P}\\) distribution function time end primary event window primary event time. Therefore, \\(G_P(-p|-w_P, 0) = Pr(P < -p | P \\(-w_P, 0)) = 1 - Pr(C_P \\leq p) = 1 - F_{C_P}(p)\\).","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/articles/why-it-works.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"Why it works","text":"thank Sang Woo Park (gh: @parksw3) making demonstrating direct link approach taken note approach taken Park et al[2]. connection two approaches written substantially comment.","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Abbott. Author, maintainer. Sam Brand. Author. Adam Howes. Contributor.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abbott S, Brand S (2024). primarycensoreddist: Primary Event Censored Distributions R Stan. doi:10.5281/zenodo.13632839.","code":"@Manual{,   title = {primarycensoreddist: Primary Event Censored Distributions in R and Stan},   author = {Sam Abbott and Sam Brand},   year = {2024},   doi = {10.5281/zenodo.13632839}, }"},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Primary Event Censored Distributions in R and Stan","text":"package provides R functions working primary event censored distributions Stan implementations use Bayesian modeling. Primary event censored distributions useful modeling delayed reporting scenarios epidemiology fields. provides support arbitrary delay distributions, range common primary distributions, allows truncation secondary event censoring accounted .","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Primary Event Censored Distributions in R and Stan","text":"can install latest released version using normal R function, though need point r-universe instead CRAN: Alternatively, can use remotes package install development version Github (warning! version may contain breaking changes /bugs): Similarly, can install historical versions specifying release tag (e.g. installs 0.2.0): Note: can also use last approach install specific commit needed, e.g. want try specific unreleased feature, absolute latest developmental version. wish use Stan functions, need install CmdStan, also entails suitable C++ toolchain setup. recommend using cmdstanr package. Stan team provides instructions Getting started cmdstanr vignette, details support package site along key instructions available Stan resources package vignette, brief version : Note: can speed CmdStan installation using cores argument. installing particular version epinowcast, may also need install past version CmdStan, can version argument.","code":"install.packages(   \"primarycensoreddist\",   repos = \"https://epinowcast.r-universe.dev\" ) remotes::install_github(   \"epinowcast/primarycensoreddist\",   dependencies = TRUE ) remotes::install_github(   \"epinowcast/primarycensoreddist\",   dependencies = TRUE, ref = \"v0.2.0\" ) # if you not yet installed `primarycensoreddist`, or you installed it without # `Suggests` dependencies install.packages(   \"cmdstanr\",   repos = c(\"https://stan-dev.r-universe.dev\", getOption(\"repos\")) ) # once `cmdstanr` is installed: cmdstanr::install_cmdstan()"},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Primary Event Censored Distributions in R and Stan","text":"provide range documentation, case studies, community spaces ask (answer!) questions: primarycensoreddist website includes function reference, model outline, case studies using package. site mainly concerns release version, can also find documentation latest development version. created package vignettes help get started primarycensoreddist highlight features case studies. organisation website includes links resources, guest posts, seminar schedule upcoming past recordings. community forum areas question answer considering new methods tools, among others. generally interested real-time analysis infectious disease, may find useful even use primarycensoreddist.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Primary Event Censored Distributions in R and Stan","text":"welcome contributions new contributors! particularly appreciate help identifying identified issues. Please check add issues, /add pull request see contributing guide information. need different underlying model work: primarycensoreddist provides flexible framework censored distributions R Stan. implement new distributions censoring mechanisms expand overall flexibility improve defaults, please let us know either community forum. always like hear new use-cases extensions package.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"how-to-make-a-bug-report-or-feature-request","dir":"","previous_headings":"Contributing","what":"How to make a bug report or feature request","title":"Primary Event Censored Distributions in R and Stan","text":"Please briefly describe problem output expect issue. question, please don’t open issue. Instead, ask Q page. See contributing guide information.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"Contributing","what":"Code of Conduct","title":"Primary Event Censored Distributions in R and Stan","text":"Please note primarycensoreddist project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Primary Event Censored Distributions in R and Stan","text":"making use methodology methodology based, please cite relevant papers methods outline. use primarycensoreddist work, please consider citing citation(\"primarycensoreddist\").","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Primary Event Censored Distributions in R and Stan","text":"contributions project gratefully acknowledged using allcontributors package following -contributors specification. Contributions kind welcome!","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"code","dir":"","previous_headings":"Contributors","what":"Code","title":"Primary Event Censored Distributions in R and Stan","text":"seabbs, SamuelBrand1, athowes","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"issue-authors","dir":"","previous_headings":"Contributors","what":"Issue Authors","title":"Primary Event Censored Distributions in R and Stan","text":"zsusswein","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/index.html","id":"issue-contributors","dir":"","previous_headings":"Contributors","what":"Issue Contributors","title":"Primary Event Censored Distributions in R and Stan","text":"parksw3","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_dprimary.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a function is a valid bounded probability density function (PDF) — check_dprimary","title":"Check if a function is a valid bounded probability density function (PDF) — check_dprimary","text":"function tests whether given function behaves like valid PDF checking integrates approximately 1 specified range takes arguments min max.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_dprimary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a function is a valid bounded probability density function (PDF) — check_dprimary","text":"","code":"check_dprimary(dprimary, pwindow, dprimary_args = list(), tolerance = 0.001)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_dprimary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a function is a valid bounded probability density function (PDF) — check_dprimary","text":"dprimary Function generate probability density function (PDF) primary event times. function take value x pwindow parameter, return probability density. normalized integrate 1 [0, pwindow]. Defaults uniform distribution [0, pwindow]. Users can provide custom functions use helper functions like dexpgrowth exponential growth distribution. See primary_dists.R examples. pwindow Primary event window dprimary_args List additional arguments passed dprimary. example, using dexpgrowth, pass list(min = 0, max = pwindow, r = 0.2) set minimum, maximum, rate parameters tolerance tolerance integral considered close 1","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_dprimary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a function is a valid bounded probability density function (PDF) — check_dprimary","text":"NULL. function stop execution error message dprimary valid PDF.","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_dprimary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a function is a valid bounded probability density function (PDF) — check_dprimary","text":"","code":"check_dprimary(dunif, pwindow = 1)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_pdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a function is a valid cumulative distribution function (CDF) — check_pdist","title":"Check if a function is a valid cumulative distribution function (CDF) — check_pdist","text":"function tests whether given function behaves like valid CDF checking monotonically increasing bounded 0 1.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_pdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a function is a valid cumulative distribution function (CDF) — check_pdist","text":"","code":"check_pdist(pdist, D, ...)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_pdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a function is a valid cumulative distribution function (CDF) — check_pdist","text":"pdist Distribution function (CDF) D Maximum delay (truncation point). finite, distribution truncated D. set Inf, truncation applied. Defaults Inf. ... Additional arguments passed pdist","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_pdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a function is a valid cumulative distribution function (CDF) — check_pdist","text":"NULL. function stop execution error message pdist valid CDF.","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/check_pdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a function is a valid cumulative distribution function (CDF) — check_pdist","text":"","code":"check_pdist(pnorm, D = 10)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-dpcens.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a fitdistrplus compatible wrapper around dprimarycensoreddist — .dpcens","title":"Define a fitdistrplus compatible wrapper around dprimarycensoreddist — .dpcens","text":"Define fitdistrplus compatible wrapper around dprimarycensoreddist","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-dpcens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a fitdistrplus compatible wrapper around dprimarycensoreddist — .dpcens","text":"","code":".dpcens(   x,   swindows,   pdist,   pwindow,   D,   dprimary,   dprimary_args,   pdist_name,   dprimary_name,   ... )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-dpcens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a fitdistrplus compatible wrapper around dprimarycensoreddist — .dpcens","text":"x Vector quantiles swindows numeric vector secondary window sizes corresponding element x pdist Distribution function (CDF) pwindow Primary event window D Maximum delay (truncation point). finite, distribution truncated D. set Inf, truncation applied. Defaults Inf. dprimary Function generate probability density function (PDF) primary event times. function take value x pwindow parameter, return probability density. normalized integrate 1 [0, pwindow]. Defaults uniform distribution [0, pwindow]. Users can provide custom functions use helper functions like dexpgrowth exponential growth distribution. See primary_dists.R examples. dprimary_args List additional arguments passed dprimary. example, using dexpgrowth, pass list(min = 0, max = pwindow, r = 0.2) set minimum, maximum, rate parameters pdist_name string specifying name delay distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set pdist passed pre-assigned variable rather function name. dprimary_name string specifying name primary event distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set dprimary passed pre-assigned variable rather function name. ... Additional arguments passed distribution function","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-extract_function_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Base Function Name — .extract_function_name","title":"Extract Base Function Name — .extract_function_name","text":"helper function extracts base name function, removing namespace prefixes.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-extract_function_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Base Function Name — .extract_function_name","text":"","code":".extract_function_name(func)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-extract_function_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Base Function Name — .extract_function_name","text":"func output substitute function.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-extract_function_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Base Function Name — .extract_function_name","text":"character string representing base name function.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-extract_stan_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract function names or content from Stan code — .extract_stan_functions","title":"Extract function names or content from Stan code — .extract_stan_functions","text":"Extract function names content Stan code","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-extract_stan_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract function names or content from Stan code — .extract_stan_functions","text":"","code":".extract_stan_functions(content, names_only = FALSE, functions = NULL)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-extract_stan_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract function names or content from Stan code — .extract_stan_functions","text":"content Character vector containing Stan code names_only Logical, TRUE extract function names, otherwise extract function content. functions Optional, character vector function names extract content .","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-extract_stan_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract function names or content from Stan code — .extract_stan_functions","text":"Character vector function names content","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-ppcens.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a fitdistrplus compatible wrapper around pprimarycensoreddist — .ppcens","title":"Define a fitdistrplus compatible wrapper around pprimarycensoreddist — .ppcens","text":"Define fitdistrplus compatible wrapper around pprimarycensoreddist","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-ppcens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a fitdistrplus compatible wrapper around pprimarycensoreddist — .ppcens","text":"","code":".ppcens(   q,   pdist,   pwindow,   D,   dprimary,   dprimary_args,   pdist_name,   dprimary_name,   ... )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dot-ppcens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a fitdistrplus compatible wrapper around pprimarycensoreddist — .ppcens","text":"q Vector quantiles pdist Distribution function (CDF) pwindow Primary event window D Maximum delay (truncation point). finite, distribution truncated D. set Inf, truncation applied. Defaults Inf. dprimary Function generate probability density function (PDF) primary event times. function take value x pwindow parameter, return probability density. normalized integrate 1 [0, pwindow]. Defaults uniform distribution [0, pwindow]. Users can provide custom functions use helper functions like dexpgrowth exponential growth distribution. See primary_dists.R examples. dprimary_args List additional arguments passed dprimary. example, using dexpgrowth, pass list(min = 0, max = pwindow, r = 0.2) set minimum, maximum, rate parameters pdist_name string specifying name delay distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set pdist passed pre-assigned variable rather function name. dprimary_name string specifying name primary event distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set dprimary passed pre-assigned variable rather function name. ... Additional arguments passed pdist","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dprimarycensoreddist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the primary event censored PMF for delays — dprimarycensoreddist","title":"Compute the primary event censored PMF for delays — dprimarycensoreddist","text":"function computes primary event censored probability mass function (PMF) given set quantiles. adjusts PMF primary event distribution accounting delay distribution potential truncation maximum delay (D). function allows custom primary event distributions delay distributions.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dprimarycensoreddist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the primary event censored PMF for delays — dprimarycensoreddist","text":"","code":"dprimarycensoreddist(   x,   pdist,   pwindow = 1,   swindow = 1,   D = Inf,   dprimary = stats::dunif,   dprimary_args = list(),   log = FALSE,   pdist_name = NULL,   dprimary_name = NULL,   ... )  dpcens(   x,   pdist,   pwindow = 1,   swindow = 1,   D = Inf,   dprimary = stats::dunif,   dprimary_args = list(),   log = FALSE,   pdist_name = NULL,   dprimary_name = NULL,   ... )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dprimarycensoreddist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the primary event censored PMF for delays — dprimarycensoreddist","text":"x Vector quantiles pdist Distribution function (CDF) pwindow Primary event window swindow Secondary event window (default: 1) D Maximum delay (truncation point). finite, distribution truncated D. set Inf, truncation applied. Defaults Inf. dprimary Function generate probability density function (PDF) primary event times. function take value x pwindow parameter, return probability density. normalized integrate 1 [0, pwindow]. Defaults uniform distribution [0, pwindow]. Users can provide custom functions use helper functions like dexpgrowth exponential growth distribution. See primary_dists.R examples. dprimary_args List additional arguments passed dprimary. example, using dexpgrowth, pass list(min = 0, max = pwindow, r = 0.2) set minimum, maximum, rate parameters log Logical; TRUE, probabilities p given log(p) pdist_name string specifying name delay distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set pdist passed pre-assigned variable rather function name. dprimary_name string specifying name primary event distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set dprimary passed pre-assigned variable rather function name. ... Additional arguments passed distribution function","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dprimarycensoreddist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the primary event censored PMF for delays — dprimarycensoreddist","text":"Vector primary event censored PMFs, normalized D finite (truncation adjustment)","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dprimarycensoreddist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the primary event censored PMF for delays — dprimarycensoreddist","text":"primary event censored PMF computed taking difference primary event censored cumulative distribution function (CDF) two points, \\(d + \\text{swindow}\\) \\(d\\). primary event censored PMF, \\(f_{\\text{cens}}(d)\\), given : $$ f_{\\text{cens}}(d) = F_{\\text{cens}}(d + \\text{swindow}) - F_{\\text{cens}}(d) $$ \\(F_{\\text{cens}}\\) primary event censored CDF. function first computes CDFs unique points (including \\(d\\) \\(d + \\text{swindow}\\)) using pprimarycensoreddist(). creates lookup table CDFs efficiently calculate PMF input value. non-positive delays, function returns 0. finite maximum delay \\(D\\) specified, PMF normalized ensure sums 1 range [0, D]. normalization can expressed : $$ f_{\\text{cens,norm}}(d) = \\frac{f_{\\text{cens}}(d)}{\\sum_{=0}^{D-1}  f_{\\text{cens}}()} $$ \\(f_{\\text{cens,norm}}(d)\\) normalized PMF \\(f_{\\text{cens}}(d)\\) unnormalized PMF. explanation mathematical details CDF, refer documentation pprimarycensoreddist().","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/dprimarycensoreddist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the primary event censored PMF for delays — dprimarycensoreddist","text":"","code":"# Example: Weibull distribution with uniform primary events dprimarycensoreddist(c(0.1, 0.5, 1), pweibull, shape = 1.5, scale = 2.0) #> [1] 0.1577952 0.2735269 0.3463199  # Example: Weibull distribution with exponential growth primary events dprimarycensoreddist(   c(0.1, 0.5, 1), pweibull,   dprimary = dexpgrowth,   dprimary_args = list(r = 0.2), shape = 1.5, scale = 2.0 ) #> [1] 0.1522796 0.2691280 0.3459055"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/expgrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential growth distribution functions — expgrowth","title":"Exponential growth distribution functions — expgrowth","text":"Density, distribution function, random generation exponential growth distribution.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/expgrowth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential growth distribution functions — expgrowth","text":"","code":"dexpgrowth(x, min = 0, max = 1, r, log = FALSE)  pexpgrowth(q, min = 0, max = 1, r, lower.tail = TRUE, log.p = FALSE)  rexpgrowth(n, min = 0, max = 1, r)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/expgrowth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential growth distribution functions — expgrowth","text":"x, q Vector quantiles. min Minimum value distribution range. Default 0. max Maximum value distribution range. Default 1. r Rate parameter exponential growth. log, log.p Logical; TRUE, probabilities p given log(p). lower.tail Logical; TRUE (default), probabilities P[X ≤ x], otherwise, P[X > x]. n Number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/expgrowth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential growth distribution functions — expgrowth","text":"dexpgrowth gives density, pexpgrowth gives distribution function, rexpgrowth generates random deviates. length result determined n rexpgrowth, maximum lengths numerical arguments functions.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/expgrowth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential growth distribution functions — expgrowth","text":"exponential growth distribution defined interval [min, max] rate parameter (r). probability density function (PDF) : $$f(x) = \\frac{r \\cdot \\exp(r \\cdot (x - min))}{\\exp(r \\cdot max) -  \\exp(r \\cdot min)}$$ cumulative distribution function (CDF) : $$F(x) = \\frac{\\exp(r \\cdot (x - min)) - \\exp(r \\cdot min)}{  \\exp(r \\cdot max) - \\exp(r \\cdot min)}$$ random number generation, use inverse transform sampling method: Generate \\(u \\sim \\text{Uniform}(0,1)\\) Set \\(F(x) = u\\) solve \\(x\\): $$    x = min + \\frac{1}{r} \\cdot \\log(u \\cdot (\\exp(r \\cdot max) -   \\exp(r \\cdot min)) + \\exp(r \\cdot min))    $$ method works probability integral transform theorem, states \\(X\\) continuous random variable CDF \\(F(x)\\), \\(Y = F(X)\\) follows \\(\\text{Uniform}(0,1)\\) distribution. Conversely, \\(U\\) \\(\\text{Uniform}(0,1)\\) random variable, \\(F^{-1}(U)\\) distribution \\(X\\), \\(F^{-1}\\) inverse CDF. case, generate \\(u\\) \\(\\text{Uniform}(0,1)\\), solve \\(F(x) = u\\) \\(x\\) get sample exponential growth distribution. formula \\(x\\) derived algebraically solving equation: $$ u = \\frac{\\exp(r \\cdot (x - min)) - \\exp(r \\cdot min)}{\\exp(r \\cdot max) -  \\exp(r \\cdot min)} $$ \\(r\\) close 0 (\\(|r| < 1e-10\\)), distribution approximates uniform distribution [min, max], use simpler method generate samples directly uniform distribution.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/expgrowth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential growth distribution functions — expgrowth","text":"","code":"x <- seq(0, 1, by = 0.1) probs <- dexpgrowth(x, r = 0.2) cumprobs <- pexpgrowth(x, r = 0.2) samples <- rexpgrowth(100, r = 0.2)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/fitdistdoublecens.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a distribution to doubly censored data — fitdistdoublecens","title":"Fit a distribution to doubly censored data — fitdistdoublecens","text":"function wraps custom approach fitting distributions doubly censored data using fitdistrplus primarycensoreddist.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/fitdistdoublecens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a distribution to doubly censored data — fitdistdoublecens","text":"","code":"fitdistdoublecens(   censdata,   distr,   pwindow = 1,   D = Inf,   dprimary = stats::dunif,   dprimary_name = NULL,   dprimary_args = list(),   ... )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/fitdistdoublecens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a distribution to doubly censored data — fitdistdoublecens","text":"censdata data frame columns 'left' 'right' representing lower upper bounds censored observations. Unlike fitdistrplus::fitdistcens() NA supported either upper lower bounds. distr character string naming distribution fitted. pwindow Primary event window D Maximum delay (truncation point). finite, distribution truncated D. set Inf, truncation applied. Defaults Inf. dprimary Function generate probability density function (PDF) primary event times. function take value x pwindow parameter, return probability density. normalized integrate 1 [0, pwindow]. Defaults uniform distribution [0, pwindow]. Users can provide custom functions use helper functions like dexpgrowth exponential growth distribution. See primary_dists.R examples. dprimary_name string specifying name primary event distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set dprimary passed pre-assigned variable rather function name. dprimary_args List additional arguments passed dprimary. example, using dexpgrowth, pass list(min = 0, max = pwindow, r = 0.2) set minimum, maximum, rate parameters ... Additional arguments passed fitdistrplus::fitdist().","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/fitdistdoublecens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a distribution to doubly censored data — fitdistdoublecens","text":"object class \"fitdist\" returned fitdistrplus::fitdist.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/fitdistdoublecens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a distribution to doubly censored data — fitdistdoublecens","text":"function temporarily assigns removes functions global environment order work fitdistr. Users aware behaviour, especially existing functions names global environment.","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/fitdistdoublecens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a distribution to doubly censored data — fitdistdoublecens","text":"","code":"# Example with normal distribution set.seed(123) n <- 1000 true_mean <- 5 true_sd <- 2 pwindow <- 2 swindow <- 2 D <- 10 samples <- rprimarycensoreddist(   n, rnorm,   mean = true_mean, sd = true_sd,   pwindow = pwindow, swindow = swindow, D = D )  delay_data <- data.frame(   left = samples,   right = samples + swindow )  fit_norm <- fitdistdoublecens(   delay_data,   distr = \"norm\",   start = list(mean = 0, sd = 1),   D = D, pwindow = pwindow )  summary(fit_norm) #> Fitting of the distribution ' .pcens_dist ' by maximum likelihood  #> Parameters :  #>      estimate Std. Error #> mean 5.007126 0.07883554 #> sd   2.020160 0.06962184 #> Loglikelihood:  -1398.874   AIC:  2801.747   BIC:  2811.563  #> Correlation matrix: #>           mean        sd #> mean 1.0000000 0.3248076 #> sd   0.3248076 1.0000000 #>"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/new_primary_censored_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 class for primary event censored distribution computation — new_primary_censored_dist","title":"S3 class for primary event censored distribution computation — new_primary_censored_dist","text":"S3 class primary event censored distribution computation","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/new_primary_censored_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 class for primary event censored distribution computation — new_primary_censored_dist","text":"","code":"new_primary_censored_dist(   pdist,   dprimary,   dprimary_args,   pdist_name = NULL,   dprimary_name = NULL,   ... )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/new_primary_censored_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 class for primary event censored distribution computation — new_primary_censored_dist","text":"pdist Distribution function (CDF) dprimary Function generate probability density function (PDF) primary event times. function take value x pwindow parameter, return probability density. normalized integrate 1 [0, pwindow]. Defaults uniform distribution [0, pwindow]. Users can provide custom functions use helper functions like dexpgrowth exponential growth distribution. See primary_dists.R examples. dprimary_args List additional arguments passed dprimary. example, using dexpgrowth, pass list(min = 0, max = pwindow, r = 0.2) set minimum, maximum, rate parameters pdist_name string specifying name delay distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set pdist passed pre-assigned variable rather function name. dprimary_name string specifying name primary event distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set dprimary passed pre-assigned variable rather function name. ... Additional arguments passed pdist","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/new_primary_censored_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 class for primary event censored distribution computation — new_primary_censored_dist","text":"object class primary_censored_cdf","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_as_cmdstan_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for primarycensoreddist Stan model — pcd_as_cmdstan_data","title":"Prepare data for primarycensoreddist Stan model — pcd_as_cmdstan_data","text":"function takes delay data prepares use primarycensoreddist Stan model.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_as_cmdstan_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for primarycensoreddist Stan model — pcd_as_cmdstan_data","text":"","code":"pcd_as_cmdstan_data(   data,   delay = \"delay\",   delay_upper = \"delay_upper\",   n = \"n\",   pwindow = \"pwindow\",   relative_obs_time = \"relative_obs_time\",   dist_id,   primary_dist_id,   param_bounds,   primary_param_bounds,   priors,   primary_priors,   compute_log_lik = FALSE,   use_reduce_sum = FALSE )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_as_cmdstan_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for primarycensoreddist Stan model — pcd_as_cmdstan_data","text":"data data frame containing delay data. delay Column name observed delays (default: \"delay\") delay_upper Column name upper bound delays (default: \"delay_upper\") n Column name count observations (default: \"n\") pwindow Column name primary window (default: \"pwindow\") relative_obs_time Column name relative observation time (default: \"relative_obs_time\") dist_id Integer identifying delay distribution: 1 = Lognormal, 2 = Gamma, 3 = Weibull, 4 = Exponential, 5 = Generalized Gamma, 6 = Negative Binomial, 7 = Poisson, 8 = Bernoulli, 9 = Beta, 10 = Binomial, 11 = Categorical, 12 = Cauchy, 13 = Chi-square, 14 = Dirichlet, 15 = Gumbel, 16 = Inverse Gamma, 17 = Logistic primary_dist_id Integer identifying primary distribution: 1 = Uniform, 2 = Exponential growth param_bounds list elements lower upper, numeric vector specifying bounds delay distribution parameters. primary_param_bounds list elements lower upper, numeric vector specifying bounds primary distribution parameters. priors list elements location scale, numeric vector specifying priors delay distribution parameters. primary_priors list elements location scale, numeric vector specifying priors primary distribution parameters. compute_log_lik Logical; compute log likelihood? (default: FALSE) use_reduce_sum Logical; use reduce_sum performance? (default: FALSE)","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_as_cmdstan_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for primarycensoreddist Stan model — pcd_as_cmdstan_data","text":"list containing data formatted use pcd_cmdstan_model()","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_as_cmdstan_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for primarycensoreddist Stan model — pcd_as_cmdstan_data","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   delay = c(1, 2, 3),   delay_upper = c(2, 3, 4),   n = c(10, 20, 15),   pwindow = c(1, 1, 2),   relative_obs_time = c(10, 10, 10) ) stan_data <- pcd_as_cmdstan_data(   data,   dist_id = 1,   primary_dist_id = 1,   param_bounds = list(lower = c(0, 0), upper = c(10, 10)),   primary_param_bounds = list(lower = numeric(0), upper = numeric(0)),   priors = list(location = c(1, 1), scale = c(1, 1)),   primary_priors = list(location = numeric(0), scale = numeric(0)) ) } # }"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_cmdstan_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CmdStanModel with primarycensoreddist Stan functions — pcd_cmdstan_model","title":"Create a CmdStanModel with primarycensoreddist Stan functions — pcd_cmdstan_model","text":"function creates CmdStanModel object using Stan model functions primarycensoreddist optionally includes additional user-specified Stan files.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_cmdstan_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CmdStanModel with primarycensoreddist Stan functions — pcd_cmdstan_model","text":"","code":"pcd_cmdstan_model(include_paths = primarycensoreddist::pcd_stan_path(), ...)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_cmdstan_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CmdStanModel with primarycensoreddist Stan functions — pcd_cmdstan_model","text":"include_paths Character vector paths include Stan compilation. Defaults result pcd_stan_path(). ... Additional arguments passed cmdstanr::cmdstan_model().","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_cmdstan_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CmdStanModel with primarycensoreddist Stan functions — pcd_cmdstan_model","text":"CmdStanModel object.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_cmdstan_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a CmdStanModel with primarycensoreddist Stan functions — pcd_cmdstan_model","text":"underlying Stan model (pcens_model.stan) supports various features: Multiple probability distributions modeling delays Primary secondary censoring Truncation Optional use reduce_sum improved performance (via within chain parallelism). Flexible prior specifications Optional computation log-likelihood model comparison","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_cmdstan_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a CmdStanModel with primarycensoreddist Stan functions — pcd_cmdstan_model","text":"","code":"if (FALSE) { # \\dontrun{ model <- pcd_cmdstan_model() fit <- model$sample(data = stan_data) } # }"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_load_stan_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Stan functions as a string — pcd_load_stan_functions","title":"Load Stan functions as a string — pcd_load_stan_functions","text":"Load Stan functions string","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_load_stan_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Stan functions as a string — pcd_load_stan_functions","text":"","code":"pcd_load_stan_functions(   functions = NULL,   stan_path = primarycensoreddist::pcd_stan_path(),   wrap_in_block = FALSE,   write_to_file = FALSE,   output_file = \"pcd_functions.stan\" )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_load_stan_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Stan functions as a string — pcd_load_stan_functions","text":"functions Character vector function names load. Defaults functions. stan_path Character string, path Stan code. Defaults path Stan code primarycensoreddist package. wrap_in_block Logical, whether wrap functions functions{} block. Default FALSE. write_to_file Logical, whether write output file. Default FALSE. output_file Character string, path write output file write_to_file TRUE. Defaults \"pcd_functions.stan\".","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_load_stan_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Stan functions as a string — pcd_load_stan_functions","text":"character string containing requested Stan functions","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Stan files containing specified functions — pcd_stan_files","title":"Get Stan files containing specified functions — pcd_stan_files","text":"function retrieves Stan files specified directory, optionally filtering files contain specific functions.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Stan files containing specified functions — pcd_stan_files","text":"","code":"pcd_stan_files(   functions = NULL,   stan_path = primarycensoreddist::pcd_stan_path() )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Stan files containing specified functions — pcd_stan_files","text":"functions Character vector function names search . NULL, Stan files returned. stan_path Character string specifying path directory containing Stan files. Defaults Stan path primarycensoreddist package.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Stan files containing specified functions — pcd_stan_files","text":"character vector file paths Stan files.","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Stan function names from Stan files — pcd_stan_functions","title":"Get Stan function names from Stan files — pcd_stan_functions","text":"function reads Stan files specified directory extracts names functions defined files.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Stan function names from Stan files — pcd_stan_functions","text":"","code":"pcd_stan_functions(stan_path = primarycensoreddist::pcd_stan_path())"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Stan function names from Stan files — pcd_stan_functions","text":"stan_path Character string specifying path directory containing Stan files. Defaults Stan path primarycensoreddist package.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Stan function names from Stan files — pcd_stan_functions","text":"character vector containing unique names functions found Stan files.","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to the Stan code — pcd_stan_path","title":"Get the path to the Stan code — pcd_stan_path","text":"Get path Stan code","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to the Stan code — pcd_stan_path","text":"","code":"pcd_stan_path()"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pcd_stan_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path to the Stan code — pcd_stan_path","text":"character string path Stan code","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pprimarycensoreddist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the primary event censored CDF for delays — pprimarycensoreddist","title":"Compute the primary event censored CDF for delays — pprimarycensoreddist","text":"function computes primary event censored cumulative distribution function (CDF) given set quantiles. adjusts CDF primary event distribution accounting delay distribution potential truncation maximum delay (D). function allows custom primary event distributions delay distributions.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pprimarycensoreddist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the primary event censored CDF for delays — pprimarycensoreddist","text":"","code":"pprimarycensoreddist(   q,   pdist,   pwindow = 1,   D = Inf,   dprimary = stats::dunif,   dprimary_args = list(),   pdist_name = NULL,   dprimary_name = NULL,   ... )  ppcens(   q,   pdist,   pwindow = 1,   D = Inf,   dprimary = stats::dunif,   dprimary_args = list(),   pdist_name = NULL,   dprimary_name = NULL,   ... )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pprimarycensoreddist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the primary event censored CDF for delays — pprimarycensoreddist","text":"q Vector quantiles pdist Distribution function (CDF) pwindow Primary event window D Maximum delay (truncation point). finite, distribution truncated D. set Inf, truncation applied. Defaults Inf. dprimary Function generate probability density function (PDF) primary event times. function take value x pwindow parameter, return probability density. normalized integrate 1 [0, pwindow]. Defaults uniform distribution [0, pwindow]. Users can provide custom functions use helper functions like dexpgrowth exponential growth distribution. See primary_dists.R examples. dprimary_args List additional arguments passed dprimary. example, using dexpgrowth, pass list(min = 0, max = pwindow, r = 0.2) set minimum, maximum, rate parameters pdist_name string specifying name delay distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set pdist passed pre-assigned variable rather function name. dprimary_name string specifying name primary event distribution function. NULL, function name extracted using .extract_function_name(). Used determine analytical solution exists primary censored distribution. Must set dprimary passed pre-assigned variable rather function name. ... Additional arguments passed pdist","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pprimarycensoreddist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the primary event censored CDF for delays — pprimarycensoreddist","text":"Vector primary event censored CDFs, normalized D finite (truncation adjustment)","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pprimarycensoreddist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the primary event censored CDF for delays — pprimarycensoreddist","text":"primary event censored CDF computed integrating product delay distribution function (CDF) primary event distribution function (PDF) primary event window. integration adjusted truncation finite maximum delay (D) specified. primary event censored CDF, \\(F_{\\text{cens}}(q)\\), given : $$ F_{\\text{cens}}(q) = \\int_{0}^{pwindow} F(q - p) \\cdot f_{\\text{primary}}(p) \\, dp $$ \\(F\\) CDF delay distribution, \\(f_{\\text{primary}}\\) PDF primary event times, \\(pwindow\\) primary event window. maximum delay \\(D\\) finite, CDF normalized dividing \\(F_{\\text{cens}}(D)\\): $$ F_{\\text{cens,norm}}(q) = \\frac{F_{\\text{cens}}(q)}{F_{\\text{cens}}(D)} $$ \\(F_{\\text{cens,norm}}(q)\\) normalized CDF. function creates primary_censored_dist object using new_primary_censored_dist() computes primary event censored CDF using primary_censored_cdf(). abstraction allows automatic use analytical solutions available, seamlessly falling back numerical integration necessary. Note: analytical detection work correctly, pdist dprimary must directly passed distribution functions, via assignment pdist_name dprimary_name must used override default extraction function name.","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/pprimarycensoreddist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the primary event censored CDF for delays — pprimarycensoreddist","text":"","code":"# Example: Lognormal distribution with uniform primary events pprimarycensoreddist(c(0.1, 0.5, 1), plnorm, meanlog = 0, sdlog = 1) #> [1] 0.0002753888 0.0475094632 0.2384217081  # Example: Lognormal distribution with exponential growth primary events pprimarycensoreddist(   c(0.1, 0.5, 1), plnorm,   dprimary = dexpgrowth,   dprimary_args = list(r = 0.2), meanlog = 0, sdlog = 1 ) #> [1] 0.0002496934 0.0440815583 0.2290795695"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for computing primary event censored CDF — primary_censored_cdf.default","title":"Default method for computing primary event censored CDF — primary_censored_cdf.default","text":"method serves fallback combinations delay primary event distributions specific implementations. uses numeric integration method.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for computing primary event censored CDF — primary_censored_cdf.default","text":"","code":"# Default S3 method primary_censored_cdf(object, q, pwindow, use_numeric = FALSE)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for computing primary event censored CDF — primary_censored_cdf.default","text":"object primary_censored_dist object created new_primary_censored_dist(). q Vector quantiles pwindow Primary event window use_numeric Logical, TRUE forces use numeric integration even distributions analytical solutions. primarily useful testing purposes settings analytical solution breaks .","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default method for computing primary event censored CDF — primary_censored_cdf.default","text":"method implements numerical integration approach computing primary event censored CDF. uses mathematical formulation described details section pprimarycensoreddist(), applies numerical integration instead analytical solutions.","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute primary event censored CDF — primary_censored_cdf","title":"Compute primary event censored CDF — primary_censored_cdf","text":"Compute primary event censored CDF","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute primary event censored CDF — primary_censored_cdf","text":"","code":"primary_censored_cdf(object, q, pwindow, use_numeric = FALSE)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute primary event censored CDF — primary_censored_cdf","text":"object primary_censored_dist object created new_primary_censored_dist(). q Vector quantiles pwindow Primary event window use_numeric Logical, TRUE forces use numeric integration even distributions analytical solutions. primarily useful testing purposes settings analytical solution breaks .","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute primary event censored CDF — primary_censored_cdf","text":"Vector primary event censored CDFs","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.pcens_pgamma_dunif.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for Gamma delay with uniform primary — primary_censored_cdf.pcens_pgamma_dunif","title":"Method for Gamma delay with uniform primary — primary_censored_cdf.pcens_pgamma_dunif","text":"Method Gamma delay uniform primary","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.pcens_pgamma_dunif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for Gamma delay with uniform primary — primary_censored_cdf.pcens_pgamma_dunif","text":"","code":"# S3 method for class 'pcens_pgamma_dunif' primary_censored_cdf(object, q, pwindow, use_numeric = FALSE)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.pcens_pgamma_dunif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for Gamma delay with uniform primary — primary_censored_cdf.pcens_pgamma_dunif","text":"object primary_censored_dist object created new_primary_censored_dist(). q Vector quantiles pwindow Primary event window use_numeric Logical, TRUE forces use numeric integration even distributions analytical solutions. primarily useful testing purposes settings analytical solution breaks .","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.pcens_plnorm_dunif.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for Log-Normal delay with uniform primary — primary_censored_cdf.pcens_plnorm_dunif","title":"Method for Log-Normal delay with uniform primary — primary_censored_cdf.pcens_plnorm_dunif","text":"Method Log-Normal delay uniform primary","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.pcens_plnorm_dunif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for Log-Normal delay with uniform primary — primary_censored_cdf.pcens_plnorm_dunif","text":"","code":"# S3 method for class 'pcens_plnorm_dunif' primary_censored_cdf(object, q, pwindow, use_numeric = FALSE)"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/primary_censored_cdf.pcens_plnorm_dunif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for Log-Normal delay with uniform primary — primary_censored_cdf.pcens_plnorm_dunif","text":"object primary_censored_dist object created new_primary_censored_dist(). q Vector quantiles pwindow Primary event window use_numeric Logical, TRUE forces use numeric integration even distributions analytical solutions. primarily useful testing purposes settings analytical solution breaks .","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/rprimarycensoreddist.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random samples from a primary event censored distribution — rprimarycensoreddist","title":"Generate random samples from a primary event censored distribution — rprimarycensoreddist","text":"function generates random samples primary event censored distribution. adjusts distribution accounting primary event distribution potential truncation maximum delay (D). function allows custom primary event distributions delay distributions.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/rprimarycensoreddist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random samples from a primary event censored distribution — rprimarycensoreddist","text":"","code":"rprimarycensoreddist(   n,   rdist,   pwindow = 1,   swindow = 1,   D = Inf,   rprimary = stats::runif,   rprimary_args = list(),   oversampling_factor = 1.2,   ... )  rpcens(   n,   rdist,   pwindow = 1,   swindow = 1,   D = Inf,   rprimary = stats::runif,   rprimary_args = list(),   oversampling_factor = 1.2,   ... )"},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/rprimarycensoreddist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random samples from a primary event censored distribution — rprimarycensoreddist","text":"n Number random samples generate. rdist Function generate random samples delay distribution example stats::rlnorm() lognormal distribution. pwindow Primary event window swindow Integer specifying window size rounding delay (default 1). swindow = 0 rounding applied. D Maximum delay (truncation point). finite, distribution truncated D. set Inf, truncation applied. Defaults Inf. rprimary Function generate random samples primary distribution (default stats::runif()). rprimary_args List additional arguments passed rprimary. oversampling_factor Factor oversample number samples account truncation (default 1.2). ... Additional arguments passed distribution function.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/rprimarycensoreddist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random samples from a primary event censored distribution — rprimarycensoreddist","text":"Vector random samples primary event censored distribution censored secondary event window.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/rprimarycensoreddist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random samples from a primary event censored distribution — rprimarycensoreddist","text":"mathematical formulation generating random samples primary event censored distribution follows: Generate primary event times (p) specified primary event distribution (f_p) within primary event window (pwindow): $$p \\sim f_p(x), \\quad 0 \\leq x \\leq pwindow$$ Generate delays (d) specified delay distribution (f_d) parameters theta: $$d \\sim f_d(x; \\theta)$$ Calculate total delays (t) adding primary event times delays: $$t = p + d$$ Apply truncation ensure delays within specified range [0, D]: $$t_{truncated} = \\{t \\mid 0 \\leq t < D\\}$$ Round truncated delays nearest secondary event window (swindow): $$t_{valid} = \\lfloor \\frac{t_{truncated}}{swindow} \\rfloor      \\times swindow$$ function oversamples account potential truncation generates additional samples needed reach desired number valid samples.","code":""},{"path":[]},{"path":"https://primarycensoreddist.epinowcast.org/dev/reference/rprimarycensoreddist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random samples from a primary event censored distribution — rprimarycensoreddist","text":"","code":"# Example: Lognormal distribution with uniform primary events rprimarycensoreddist(10, rlnorm, meanlog = 0, sdlog = 1) #>  [1] 1 6 2 1 2 0 1 4 1 3  # Example: Lognormal distribution with exponential growth primary events rprimarycensoreddist(   10, rlnorm,   rprimary = rexpgrowth, rprimary_args = list(r = 0.2),   meanlog = 0, sdlog = 1 ) #>  [1] 0 1 4 2 2 3 0 2 1 0"},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"primarycensoreddist-0501000","dir":"Changelog","previous_headings":"","what":"primarycensoreddist 0.5.0.1000","title":"primarycensoreddist 0.5.0.1000","text":"development version primarycensoreddist yet ready release.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"package-0-5-0-1000","dir":"Changelog","previous_headings":"","what":"Package","title":"primarycensoreddist 0.5.0.1000","text":"Split “works” vignette two separate vignettes, “works” “Analytic solutions censored delay distributions”.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"primarycensoreddist-050","dir":"Changelog","previous_headings":"","what":"primarycensoreddist 0.5.0","title":"primarycensoreddist 0.5.0","text":"release adds new {touchstone} based benchmark suite package. also adds new “works” vignette aims give reader details primary censored distributions work. part “works” (@SamuelBrand1) found analytical solutions gamma, lognormal, weibull distributions uniform primary censoring. now implemented lognormal gamma distributions R stan code providing significant speedups fitting process (~10-20 times faster). Weibull added next release.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"package-0-5-0","dir":"Changelog","previous_headings":"","what":"Package","title":"primarycensoreddist 0.5.0","text":"Add {touchstone} based benchmarks benchmarking R utility functions, fitting stan fitdistplus models. Added “works” vignette. Added R infrastructure analytical solutions via primary_censored_dist S3 class. Added Weibull analytical solution “works” vignette. Added analytical solutions gamma lognormal distributions uniform primary censoring R stan code. Added numerical protection ensure CDFs delays greater maximum truncation exactly 1.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"primarycensoreddist-040","dir":"Changelog","previous_headings":"","what":"primarycensoreddist 0.4.0","title":"primarycensoreddist 0.4.0","text":"release, added new package stan model fitting distributions using cmdstanr package. also added new function fitdistdoublecens() allow fitting double censored truncated data using fitdistrplus package. well functionality improvements release focuses improving stability stan model improving speed primary_censored_ode function.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"package-0-4-0","dir":"Changelog","previous_headings":"","what":"Package","title":"primarycensoreddist 0.4.0","text":"Added new function fitdistdoublecens() allow fitting double censored truncated data using fitdistrplus package. Added low level tests Stan primary_censored_ode function. Rephrased stan code use ODE solver rather numerical integration method. allows much faster stable computation likelihood Added CmdStan model fitting distributions using cmdstanr package. Added helpers functions working new CmdStan model added example vignette. Added parameter recovery tests new CmdStan model tests primary_censored_dist_lpmf function used NUTS based fitting.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"primarycensoreddist-030","dir":"Changelog","previous_headings":"","what":"primarycensoreddist 0.3.0","title":"primarycensoreddist 0.3.0","text":"release fixes improves truncation handling across code base. also adds new vignette showcasing use primarycensoreddist fitdistrplus packages together fit distributions.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"package-0-3-0","dir":"Changelog","previous_headings":"","what":"Package","title":"primarycensoreddist 0.3.0","text":"Updated approach truncation outside primary censored distribution integral. Improved tests compare random sampling probability mass/density functions R Stan. Improved cross-testing R Stan implementations primary censored distributions. Worked improving stability primary_censored_dist_lpmf used NUTS based fitting (.e. Stan).","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"documentation-0-3-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"primarycensoreddist 0.3.0","text":"@athowes improved getting started vignette catching grammar errors simplifying language. Added new vignette showcasing use primarycensoreddist fitdistrplus packages together fit distributions.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"primarycensoreddist-020","dir":"Changelog","previous_headings":"","what":"primarycensoreddist 0.2.0","title":"primarycensoreddist 0.2.0","text":"release puts place initial documentation vignettes. also includes new primary censored distribution interface allow non-secondary event censored distributions. Development release identified numerical issues gradient evaluations primary censored distributions may lead breaking interface changes 0.3.0 Stan code.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"package-0-2-0","dir":"Changelog","previous_headings":"","what":"Package","title":"primarycensoreddist 0.2.0","text":"Added support swindow = 0 rprimarycensoreddist allow non-secondary event censored distributions. Adapted rprimarycensoreddist truncation based primary censored distribution secondary events censored. better matches generative process. Added new Stan interface tool enable finding files functions implemented Stan code.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"documentation-0-2-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"primarycensoreddist 0.2.0","text":"Added getting started vignette. Added vignette showcasing use package Stan code cmdstanr. Added vignette showcasing fit distributions using cmdstanr package.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"primarycensoreddist-010","dir":"Changelog","previous_headings":"","what":"primarycensoreddist 0.1.0","title":"primarycensoreddist 0.1.0","text":"initial primarycensoreddist release includes R stan tools dealing potentially truncated primary event censored delay distributions. expect current features work UI may change package matures next versions.","code":""},{"path":"https://primarycensoreddist.epinowcast.org/dev/news/index.html","id":"package-0-1-0","dir":"Changelog","previous_headings":"","what":"Package","title":"primarycensoreddist 0.1.0","text":"Added package skeleton. Added checking input functions. Added stan functions primary censored truncated distributions. Added R functions primary censored truncated distributions. Add R function facilitate working Stan code. Added tests primary censored truncated distributions. Added tests compare R Stan implementations. Added tests R functions facilitate working Stan code. Resolved R CMD check errors, warnings notes. Added hexsticker. Added vignette skeletons preparation 0.2.0 release.","code":""}]
