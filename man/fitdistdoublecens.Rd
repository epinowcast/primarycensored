% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitdistdoublecens.R
\name{fitdistdoublecens}
\alias{fitdistdoublecens}
\title{Fit a distribution to doubly censored data}
\usage{
fitdistdoublecens(
  censdata,
  distr,
  pwindow = 1,
  D = Inf,
  dprimary = stats::dunif,
  dprimary_args = list(),
  ...
)
}
\arguments{
\item{censdata}{A data frame with columns 'left' and 'right' representing
the lower and upper bounds of the censored observations. Unlike
\code{\link[fitdistrplus:fitdistcens]{fitdistrplus::fitdistcens()}} \code{NA} is not supported for either the
upper or lower bounds.}

\item{distr}{A character string naming the distribution to be fitted.}

\item{pwindow}{Primary event window}

\item{D}{Maximum delay (truncation point). If finite, the distribution is
truncated at D. If set to Inf, no truncation is applied. Defaults to Inf.}

\item{dprimary}{Function to generate the probability density function
(PDF) of primary event times. This function should take a value \code{x} and a
\code{pwindow} parameter, and return a probability density. It should be
normalized to integrate to 1 over [0, pwindow]. Defaults to a uniform
distribution over [0, pwindow]. Users can provide custom functions or use
helper functions like \code{dexpgrowth} for an exponential growth distribution.
See \code{primary_dists.R} for examples.}

\item{dprimary_args}{List of additional arguments to be passed to
dprimary. For example, when using \code{dexpgrowth}, you would
pass \code{list(min = 0, max = pwindow, r = 0.2)} to set the minimum, maximum,
and rate parameters.}

\item{...}{Additional arguments to be passed to \code{\link[fitdistrplus:fitdist]{fitdistrplus::fitdist()}}.}
}
\value{
An object of class "fitdist" as returned by fitdistrplus::fitdist.
}
\description{
This function wraps the custom approach for fitting distributions to doubly
censored data using fitdistrplus and primarycensoreddist.
}
\examples{
censdata <- data.frame(left = c(1, 2, 3), right = c(2, 3, 4))
fit <- fitdistdoublecens(
 censdata, "gamma", start = list(shape = 1, rate = 1)
)
}
